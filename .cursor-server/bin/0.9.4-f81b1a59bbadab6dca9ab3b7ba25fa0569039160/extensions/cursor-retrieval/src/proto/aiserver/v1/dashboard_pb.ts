// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file aiserver/v1/dashboard.proto (package aiserver.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum aiserver.v1.TeamRole
 */
export enum TeamRole {
  /**
   * @generated from enum value: TEAM_ROLE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TEAM_ROLE_OWNER = 1;
   */
  OWNER = 1,

  /**
   * @generated from enum value: TEAM_ROLE_MEMBER = 2;
   */
  MEMBER = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(TeamRole)
proto3.util.setEnumType(TeamRole, "aiserver.v1.TeamRole", [
  { no: 0, name: "TEAM_ROLE_UNSPECIFIED" },
  { no: 1, name: "TEAM_ROLE_OWNER" },
  { no: 2, name: "TEAM_ROLE_MEMBER" },
]);

/**
 * @generated from message aiserver.v1.Team
 */
export class Team extends Message<Team> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: int32 id = 2;
   */
  id = 0;

  /**
   * @generated from field: aiserver.v1.TeamRole role = 3;
   */
  role = TeamRole.UNSPECIFIED;

  /**
   * @generated from field: int32 seats = 4;
   */
  seats = 0;

  /**
   * @generated from field: bool has_billing = 5;
   */
  hasBilling = false;

  constructor(data?: PartialMessage<Team>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.Team";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "role", kind: "enum", T: proto3.getEnumType(TeamRole) },
    { no: 4, name: "seats", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "has_billing", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Team {
    return new Team().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Team {
    return new Team().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Team {
    return new Team().fromJsonString(jsonString, options);
  }

  static equals(a: Team | PlainMessage<Team> | undefined, b: Team | PlainMessage<Team> | undefined): boolean {
    return proto3.util.equals(Team, a, b);
  }
}

/**
 * @generated from message aiserver.v1.GetTeamsRequest
 */
export class GetTeamsRequest extends Message<GetTeamsRequest> {
  constructor(data?: PartialMessage<GetTeamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.GetTeamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTeamsRequest {
    return new GetTeamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTeamsRequest {
    return new GetTeamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTeamsRequest {
    return new GetTeamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTeamsRequest | PlainMessage<GetTeamsRequest> | undefined, b: GetTeamsRequest | PlainMessage<GetTeamsRequest> | undefined): boolean {
    return proto3.util.equals(GetTeamsRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.GetTeamsResponse
 */
export class GetTeamsResponse extends Message<GetTeamsResponse> {
  /**
   * @generated from field: repeated aiserver.v1.Team teams = 1;
   */
  teams: Team[] = [];

  constructor(data?: PartialMessage<GetTeamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.GetTeamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "teams", kind: "message", T: Team, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTeamsResponse {
    return new GetTeamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTeamsResponse {
    return new GetTeamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTeamsResponse {
    return new GetTeamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTeamsResponse | PlainMessage<GetTeamsResponse> | undefined, b: GetTeamsResponse | PlainMessage<GetTeamsResponse> | undefined): boolean {
    return proto3.util.equals(GetTeamsResponse, a, b);
  }
}

/**
 * @generated from message aiserver.v1.GetActivationCheckoutUrlRequest
 */
export class GetActivationCheckoutUrlRequest extends Message<GetActivationCheckoutUrlRequest> {
  /**
   * @generated from field: int32 team_id = 1;
   */
  teamId = 0;

  constructor(data?: PartialMessage<GetActivationCheckoutUrlRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.GetActivationCheckoutUrlRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "team_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActivationCheckoutUrlRequest {
    return new GetActivationCheckoutUrlRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActivationCheckoutUrlRequest {
    return new GetActivationCheckoutUrlRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActivationCheckoutUrlRequest {
    return new GetActivationCheckoutUrlRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetActivationCheckoutUrlRequest | PlainMessage<GetActivationCheckoutUrlRequest> | undefined, b: GetActivationCheckoutUrlRequest | PlainMessage<GetActivationCheckoutUrlRequest> | undefined): boolean {
    return proto3.util.equals(GetActivationCheckoutUrlRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.GetActivationCheckoutUrlResponse
 */
export class GetActivationCheckoutUrlResponse extends Message<GetActivationCheckoutUrlResponse> {
  /**
   * @generated from field: string checkout_url = 1;
   */
  checkoutUrl = "";

  constructor(data?: PartialMessage<GetActivationCheckoutUrlResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.GetActivationCheckoutUrlResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "checkout_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActivationCheckoutUrlResponse {
    return new GetActivationCheckoutUrlResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActivationCheckoutUrlResponse {
    return new GetActivationCheckoutUrlResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActivationCheckoutUrlResponse {
    return new GetActivationCheckoutUrlResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetActivationCheckoutUrlResponse | PlainMessage<GetActivationCheckoutUrlResponse> | undefined, b: GetActivationCheckoutUrlResponse | PlainMessage<GetActivationCheckoutUrlResponse> | undefined): boolean {
    return proto3.util.equals(GetActivationCheckoutUrlResponse, a, b);
  }
}

/**
 * @generated from message aiserver.v1.GetTeamCustomerPortalUrlRequest
 */
export class GetTeamCustomerPortalUrlRequest extends Message<GetTeamCustomerPortalUrlRequest> {
  /**
   * @generated from field: int32 team_id = 1;
   */
  teamId = 0;

  constructor(data?: PartialMessage<GetTeamCustomerPortalUrlRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.GetTeamCustomerPortalUrlRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "team_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTeamCustomerPortalUrlRequest {
    return new GetTeamCustomerPortalUrlRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTeamCustomerPortalUrlRequest {
    return new GetTeamCustomerPortalUrlRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTeamCustomerPortalUrlRequest {
    return new GetTeamCustomerPortalUrlRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTeamCustomerPortalUrlRequest | PlainMessage<GetTeamCustomerPortalUrlRequest> | undefined, b: GetTeamCustomerPortalUrlRequest | PlainMessage<GetTeamCustomerPortalUrlRequest> | undefined): boolean {
    return proto3.util.equals(GetTeamCustomerPortalUrlRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.GetTeamCustomerPortalUrlResponse
 */
export class GetTeamCustomerPortalUrlResponse extends Message<GetTeamCustomerPortalUrlResponse> {
  /**
   * @generated from field: string portal_url = 1;
   */
  portalUrl = "";

  constructor(data?: PartialMessage<GetTeamCustomerPortalUrlResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.GetTeamCustomerPortalUrlResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "portal_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTeamCustomerPortalUrlResponse {
    return new GetTeamCustomerPortalUrlResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTeamCustomerPortalUrlResponse {
    return new GetTeamCustomerPortalUrlResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTeamCustomerPortalUrlResponse {
    return new GetTeamCustomerPortalUrlResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTeamCustomerPortalUrlResponse | PlainMessage<GetTeamCustomerPortalUrlResponse> | undefined, b: GetTeamCustomerPortalUrlResponse | PlainMessage<GetTeamCustomerPortalUrlResponse> | undefined): boolean {
    return proto3.util.equals(GetTeamCustomerPortalUrlResponse, a, b);
  }
}

/**
 * @generated from message aiserver.v1.GetTeamMembersRequest
 */
export class GetTeamMembersRequest extends Message<GetTeamMembersRequest> {
  /**
   * @generated from field: int32 team_id = 1;
   */
  teamId = 0;

  constructor(data?: PartialMessage<GetTeamMembersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.GetTeamMembersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "team_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTeamMembersRequest {
    return new GetTeamMembersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTeamMembersRequest {
    return new GetTeamMembersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTeamMembersRequest {
    return new GetTeamMembersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTeamMembersRequest | PlainMessage<GetTeamMembersRequest> | undefined, b: GetTeamMembersRequest | PlainMessage<GetTeamMembersRequest> | undefined): boolean {
    return proto3.util.equals(GetTeamMembersRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.TeamMember
 */
export class TeamMember extends Message<TeamMember> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string email = 4;
   */
  email = "";

  /**
   * @generated from field: int32 id = 2;
   */
  id = 0;

  /**
   * @generated from field: aiserver.v1.TeamRole role = 3;
   */
  role = TeamRole.UNSPECIFIED;

  constructor(data?: PartialMessage<TeamMember>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.TeamMember";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "role", kind: "enum", T: proto3.getEnumType(TeamRole) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TeamMember {
    return new TeamMember().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TeamMember {
    return new TeamMember().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TeamMember {
    return new TeamMember().fromJsonString(jsonString, options);
  }

  static equals(a: TeamMember | PlainMessage<TeamMember> | undefined, b: TeamMember | PlainMessage<TeamMember> | undefined): boolean {
    return proto3.util.equals(TeamMember, a, b);
  }
}

/**
 * @generated from message aiserver.v1.GetTeamMembersResponse
 */
export class GetTeamMembersResponse extends Message<GetTeamMembersResponse> {
  /**
   * @generated from field: repeated aiserver.v1.TeamMember team_members = 1;
   */
  teamMembers: TeamMember[] = [];

  /**
   * @generated from field: int32 user_id = 2;
   */
  userId = 0;

  constructor(data?: PartialMessage<GetTeamMembersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.GetTeamMembersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "team_members", kind: "message", T: TeamMember, repeated: true },
    { no: 2, name: "user_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTeamMembersResponse {
    return new GetTeamMembersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTeamMembersResponse {
    return new GetTeamMembersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTeamMembersResponse {
    return new GetTeamMembersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTeamMembersResponse | PlainMessage<GetTeamMembersResponse> | undefined, b: GetTeamMembersResponse | PlainMessage<GetTeamMembersResponse> | undefined): boolean {
    return proto3.util.equals(GetTeamMembersResponse, a, b);
  }
}

/**
 * @generated from message aiserver.v1.SendTeamInviteRequest
 */
export class SendTeamInviteRequest extends Message<SendTeamInviteRequest> {
  /**
   * @generated from field: int32 team_id = 1;
   */
  teamId = 0;

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * @generated from field: aiserver.v1.TeamRole role = 3;
   */
  role = TeamRole.UNSPECIFIED;

  constructor(data?: PartialMessage<SendTeamInviteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.SendTeamInviteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "team_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "role", kind: "enum", T: proto3.getEnumType(TeamRole) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendTeamInviteRequest {
    return new SendTeamInviteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendTeamInviteRequest {
    return new SendTeamInviteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendTeamInviteRequest {
    return new SendTeamInviteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendTeamInviteRequest | PlainMessage<SendTeamInviteRequest> | undefined, b: SendTeamInviteRequest | PlainMessage<SendTeamInviteRequest> | undefined): boolean {
    return proto3.util.equals(SendTeamInviteRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.SendTeamInviteResponse
 */
export class SendTeamInviteResponse extends Message<SendTeamInviteResponse> {
  /**
   * @generated from field: int64 valid_until = 1;
   */
  validUntil = protoInt64.zero;

  constructor(data?: PartialMessage<SendTeamInviteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.SendTeamInviteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "valid_until", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendTeamInviteResponse {
    return new SendTeamInviteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendTeamInviteResponse {
    return new SendTeamInviteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendTeamInviteResponse {
    return new SendTeamInviteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SendTeamInviteResponse | PlainMessage<SendTeamInviteResponse> | undefined, b: SendTeamInviteResponse | PlainMessage<SendTeamInviteResponse> | undefined): boolean {
    return proto3.util.equals(SendTeamInviteResponse, a, b);
  }
}

/**
 * @generated from message aiserver.v1.AcceptInviteRequest
 */
export class AcceptInviteRequest extends Message<AcceptInviteRequest> {
  /**
   * @generated from field: string invite_code = 1;
   */
  inviteCode = "";

  constructor(data?: PartialMessage<AcceptInviteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AcceptInviteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "invite_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AcceptInviteRequest {
    return new AcceptInviteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AcceptInviteRequest {
    return new AcceptInviteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AcceptInviteRequest {
    return new AcceptInviteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AcceptInviteRequest | PlainMessage<AcceptInviteRequest> | undefined, b: AcceptInviteRequest | PlainMessage<AcceptInviteRequest> | undefined): boolean {
    return proto3.util.equals(AcceptInviteRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.AcceptInviteResponse
 */
export class AcceptInviteResponse extends Message<AcceptInviteResponse> {
  /**
   * @generated from field: int32 team_id = 1;
   */
  teamId = 0;

  constructor(data?: PartialMessage<AcceptInviteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AcceptInviteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "team_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AcceptInviteResponse {
    return new AcceptInviteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AcceptInviteResponse {
    return new AcceptInviteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AcceptInviteResponse {
    return new AcceptInviteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AcceptInviteResponse | PlainMessage<AcceptInviteResponse> | undefined, b: AcceptInviteResponse | PlainMessage<AcceptInviteResponse> | undefined): boolean {
    return proto3.util.equals(AcceptInviteResponse, a, b);
  }
}

/**
 * @generated from message aiserver.v1.UpdateRoleRequest
 */
export class UpdateRoleRequest extends Message<UpdateRoleRequest> {
  /**
   * @generated from field: int32 team_id = 1;
   */
  teamId = 0;

  /**
   * @generated from field: int32 user_id = 2;
   */
  userId = 0;

  /**
   * @generated from field: aiserver.v1.TeamRole role = 3;
   */
  role = TeamRole.UNSPECIFIED;

  constructor(data?: PartialMessage<UpdateRoleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.UpdateRoleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "team_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "user_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "role", kind: "enum", T: proto3.getEnumType(TeamRole) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRoleRequest {
    return new UpdateRoleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRoleRequest {
    return new UpdateRoleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRoleRequest {
    return new UpdateRoleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRoleRequest | PlainMessage<UpdateRoleRequest> | undefined, b: UpdateRoleRequest | PlainMessage<UpdateRoleRequest> | undefined): boolean {
    return proto3.util.equals(UpdateRoleRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.UpdateRoleResponse
 */
export class UpdateRoleResponse extends Message<UpdateRoleResponse> {
  constructor(data?: PartialMessage<UpdateRoleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.UpdateRoleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRoleResponse {
    return new UpdateRoleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRoleResponse {
    return new UpdateRoleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRoleResponse {
    return new UpdateRoleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRoleResponse | PlainMessage<UpdateRoleResponse> | undefined, b: UpdateRoleResponse | PlainMessage<UpdateRoleResponse> | undefined): boolean {
    return proto3.util.equals(UpdateRoleResponse, a, b);
  }
}

/**
 * @generated from message aiserver.v1.RemoveMemberRequest
 */
export class RemoveMemberRequest extends Message<RemoveMemberRequest> {
  /**
   * @generated from field: int32 team_id = 1;
   */
  teamId = 0;

  /**
   * @generated from field: int32 user_id = 2;
   */
  userId = 0;

  constructor(data?: PartialMessage<RemoveMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RemoveMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "team_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "user_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveMemberRequest {
    return new RemoveMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveMemberRequest {
    return new RemoveMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveMemberRequest {
    return new RemoveMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveMemberRequest | PlainMessage<RemoveMemberRequest> | undefined, b: RemoveMemberRequest | PlainMessage<RemoveMemberRequest> | undefined): boolean {
    return proto3.util.equals(RemoveMemberRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.RemoveMemberResponse
 */
export class RemoveMemberResponse extends Message<RemoveMemberResponse> {
  constructor(data?: PartialMessage<RemoveMemberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RemoveMemberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveMemberResponse {
    return new RemoveMemberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveMemberResponse {
    return new RemoveMemberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveMemberResponse {
    return new RemoveMemberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveMemberResponse | PlainMessage<RemoveMemberResponse> | undefined, b: RemoveMemberResponse | PlainMessage<RemoveMemberResponse> | undefined): boolean {
    return proto3.util.equals(RemoveMemberResponse, a, b);
  }
}

