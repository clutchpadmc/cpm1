// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file aiserver/v1/uploadserver.proto (package aiserver.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { DocumentationMetadata } from './docs_pb';

/**
 * @generated from message aiserver.v1.UploadedStatusRequest
 */
export class UploadedStatusRequest extends Message<UploadedStatusRequest> {
  /**
   * @generated from field: string doc_identifier = 1;
   */
  docIdentifier = "";

  constructor(data?: PartialMessage<UploadedStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.UploadedStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "doc_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadedStatusRequest {
    return new UploadedStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadedStatusRequest {
    return new UploadedStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadedStatusRequest {
    return new UploadedStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UploadedStatusRequest | PlainMessage<UploadedStatusRequest> | undefined, b: UploadedStatusRequest | PlainMessage<UploadedStatusRequest> | undefined): boolean {
    return proto3.util.equals(UploadedStatusRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.UploadDocumentationRequest
 */
export class UploadDocumentationRequest extends Message<UploadDocumentationRequest> {
  /**
   * @generated from field: string doc_identifier = 1;
   */
  docIdentifier = "";

  constructor(data?: PartialMessage<UploadDocumentationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.UploadDocumentationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "doc_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadDocumentationRequest {
    return new UploadDocumentationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadDocumentationRequest {
    return new UploadDocumentationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadDocumentationRequest {
    return new UploadDocumentationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UploadDocumentationRequest | PlainMessage<UploadDocumentationRequest> | undefined, b: UploadDocumentationRequest | PlainMessage<UploadDocumentationRequest> | undefined): boolean {
    return proto3.util.equals(UploadDocumentationRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.GetPagesRequest
 */
export class GetPagesRequest extends Message<GetPagesRequest> {
  /**
   * @generated from field: string doc_identifier = 1;
   */
  docIdentifier = "";

  constructor(data?: PartialMessage<GetPagesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.GetPagesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "doc_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPagesRequest {
    return new GetPagesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPagesRequest {
    return new GetPagesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPagesRequest {
    return new GetPagesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPagesRequest | PlainMessage<GetPagesRequest> | undefined, b: GetPagesRequest | PlainMessage<GetPagesRequest> | undefined): boolean {
    return proto3.util.equals(GetPagesRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.Pages
 */
export class Pages extends Message<Pages> {
  /**
   * @generated from field: repeated string pages = 1;
   */
  pages: string[] = [];

  constructor(data?: PartialMessage<Pages>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.Pages";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pages", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pages {
    return new Pages().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pages {
    return new Pages().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pages {
    return new Pages().fromJsonString(jsonString, options);
  }

  static equals(a: Pages | PlainMessage<Pages> | undefined, b: Pages | PlainMessage<Pages> | undefined): boolean {
    return proto3.util.equals(Pages, a, b);
  }
}

/**
 * @generated from message aiserver.v1.MarkAsPublicRequest
 */
export class MarkAsPublicRequest extends Message<MarkAsPublicRequest> {
  /**
   * @generated from field: string doc_identifier = 1;
   */
  docIdentifier = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  /**
   * @generated from field: string doc_name = 3;
   */
  docName = "";

  constructor(data?: PartialMessage<MarkAsPublicRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.MarkAsPublicRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "doc_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "doc_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MarkAsPublicRequest {
    return new MarkAsPublicRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MarkAsPublicRequest {
    return new MarkAsPublicRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MarkAsPublicRequest {
    return new MarkAsPublicRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MarkAsPublicRequest | PlainMessage<MarkAsPublicRequest> | undefined, b: MarkAsPublicRequest | PlainMessage<MarkAsPublicRequest> | undefined): boolean {
    return proto3.util.equals(MarkAsPublicRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.NewDocumentationRequest
 */
export class NewDocumentationRequest extends Message<NewDocumentationRequest> {
  /**
   * @generated from field: string doc_identifier = 1;
   */
  docIdentifier = "";

  /**
   * @generated from field: aiserver.v1.DocumentationMetadata metadata = 2;
   */
  metadata?: DocumentationMetadata;

  /**
   * @generated from field: repeated string ignore_prefixes = 4;
   */
  ignorePrefixes: string[] = [];

  /**
   * @generated from field: repeated string ignore_urls = 5;
   */
  ignoreUrls: string[] = [];

  /**
   * @generated from field: optional string custom_instructions = 6;
   */
  customInstructions?: string;

  constructor(data?: PartialMessage<NewDocumentationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.NewDocumentationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "doc_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: DocumentationMetadata },
    { no: 4, name: "ignore_prefixes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "ignore_urls", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "custom_instructions", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewDocumentationRequest {
    return new NewDocumentationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewDocumentationRequest {
    return new NewDocumentationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewDocumentationRequest {
    return new NewDocumentationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NewDocumentationRequest | PlainMessage<NewDocumentationRequest> | undefined, b: NewDocumentationRequest | PlainMessage<NewDocumentationRequest> | undefined): boolean {
    return proto3.util.equals(NewDocumentationRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.UploadResponse
 */
export class UploadResponse extends Message<UploadResponse> {
  /**
   * @generated from field: aiserver.v1.UploadResponse.Status status = 1;
   */
  status = UploadResponse_Status.UNSPECIFIED;

  /**
   * @generated from field: float progress = 2;
   */
  progress = 0;

  /**
   * @generated from field: string similar_doc_identifier = 3;
   */
  similarDocIdentifier = "";

  /**
   * @generated from field: repeated string uploaded_pages = 4;
   */
  uploadedPages: string[] = [];

  constructor(data?: PartialMessage<UploadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.UploadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(UploadResponse_Status) },
    { no: 2, name: "progress", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "similar_doc_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "uploaded_pages", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadResponse {
    return new UploadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadResponse {
    return new UploadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadResponse {
    return new UploadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UploadResponse | PlainMessage<UploadResponse> | undefined, b: UploadResponse | PlainMessage<UploadResponse> | undefined): boolean {
    return proto3.util.equals(UploadResponse, a, b);
  }
}

/**
 * The ID of the documentation that was uploaded
 *
 * @generated from enum aiserver.v1.UploadResponse.Status
 */
export enum UploadResponse_Status {
  /**
   * @generated from enum value: STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: STATUS_SUCCESS = 1;
   */
  SUCCESS = 1,

  /**
   * @generated from enum value: STATUS_FAILURE = 2;
   */
  FAILURE = 2,

  /**
   * @generated from enum value: STATUS_ALREADY_EXISTS = 3;
   */
  ALREADY_EXISTS = 3,

  /**
   * @generated from enum value: STATUS_SIMILAR_ALREADY_EXISTS = 4;
   */
  SIMILAR_ALREADY_EXISTS = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(UploadResponse_Status)
proto3.util.setEnumType(UploadResponse_Status, "aiserver.v1.UploadResponse.Status", [
  { no: 0, name: "STATUS_UNSPECIFIED" },
  { no: 1, name: "STATUS_SUCCESS" },
  { no: 2, name: "STATUS_FAILURE" },
  { no: 3, name: "STATUS_ALREADY_EXISTS" },
  { no: 4, name: "STATUS_SIMILAR_ALREADY_EXISTS" },
]);

/**
 * @generated from message aiserver.v1.UploadedStatus
 */
export class UploadedStatus extends Message<UploadedStatus> {
  /**
   * @generated from field: aiserver.v1.UploadedStatus.Status status = 1;
   */
  status = UploadedStatus_Status.UNSPECIFIED;

  /**
   * If in_progress, we return the list of successful files uploaded
   *
   * @generated from field: repeated string uploaded_pages = 2;
   */
  uploadedPages: string[] = [];

  constructor(data?: PartialMessage<UploadedStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.UploadedStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(UploadedStatus_Status) },
    { no: 2, name: "uploaded_pages", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadedStatus {
    return new UploadedStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadedStatus {
    return new UploadedStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadedStatus {
    return new UploadedStatus().fromJsonString(jsonString, options);
  }

  static equals(a: UploadedStatus | PlainMessage<UploadedStatus> | undefined, b: UploadedStatus | PlainMessage<UploadedStatus> | undefined): boolean {
    return proto3.util.equals(UploadedStatus, a, b);
  }
}

/**
 * @generated from enum aiserver.v1.UploadedStatus.Status
 */
export enum UploadedStatus_Status {
  /**
   * @generated from enum value: STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: STATUS_IN_PROGRESS = 1;
   */
  IN_PROGRESS = 1,

  /**
   * @generated from enum value: STATUS_SUCCEEDED = 2;
   */
  SUCCEEDED = 2,

  /**
   * @generated from enum value: STATUS_FAILED = 3;
   */
  FAILED = 3,

  /**
   * @generated from enum value: STATUS_NOT_FOUND = 4;
   */
  NOT_FOUND = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(UploadedStatus_Status)
proto3.util.setEnumType(UploadedStatus_Status, "aiserver.v1.UploadedStatus.Status", [
  { no: 0, name: "STATUS_UNSPECIFIED" },
  { no: 1, name: "STATUS_IN_PROGRESS" },
  { no: 2, name: "STATUS_SUCCEEDED" },
  { no: 3, name: "STATUS_FAILED" },
  { no: 4, name: "STATUS_NOT_FOUND" },
]);

