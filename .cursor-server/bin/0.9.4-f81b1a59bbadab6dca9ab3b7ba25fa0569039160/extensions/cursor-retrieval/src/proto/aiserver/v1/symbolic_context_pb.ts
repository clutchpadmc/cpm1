// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file aiserver/v1/symbolic_context.proto (package aiserver.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { SimpleRange } from './utils_pb';

/**
 * @generated from message aiserver.v1.CreateExperimentalIndexRequest
 */
export class CreateExperimentalIndexRequest extends Message<CreateExperimentalIndexRequest> {
  /**
   * @generated from field: repeated string files = 1;
   */
  files: string[] = [];

  /**
   * @generated from field: string target_dir = 2;
   */
  targetDir = "";

  /**
   * @generated from field: string repo = 3;
   */
  repo = "";

  constructor(data?: PartialMessage<CreateExperimentalIndexRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CreateExperimentalIndexRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "files", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "target_dir", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "repo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateExperimentalIndexRequest {
    return new CreateExperimentalIndexRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateExperimentalIndexRequest {
    return new CreateExperimentalIndexRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateExperimentalIndexRequest {
    return new CreateExperimentalIndexRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateExperimentalIndexRequest | PlainMessage<CreateExperimentalIndexRequest> | undefined, b: CreateExperimentalIndexRequest | PlainMessage<CreateExperimentalIndexRequest> | undefined): boolean {
    return proto3.util.equals(CreateExperimentalIndexRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.CreateExperimentalIndexResponse
 */
export class CreateExperimentalIndexResponse extends Message<CreateExperimentalIndexResponse> {
  /**
   * @generated from field: string index_id = 1;
   */
  indexId = "";

  constructor(data?: PartialMessage<CreateExperimentalIndexResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CreateExperimentalIndexResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateExperimentalIndexResponse {
    return new CreateExperimentalIndexResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateExperimentalIndexResponse {
    return new CreateExperimentalIndexResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateExperimentalIndexResponse {
    return new CreateExperimentalIndexResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateExperimentalIndexResponse | PlainMessage<CreateExperimentalIndexResponse> | undefined, b: CreateExperimentalIndexResponse | PlainMessage<CreateExperimentalIndexResponse> | undefined): boolean {
    return proto3.util.equals(CreateExperimentalIndexResponse, a, b);
  }
}

/**
 * @generated from message aiserver.v1.ListExperimentalIndexFilesRequest
 */
export class ListExperimentalIndexFilesRequest extends Message<ListExperimentalIndexFilesRequest> {
  /**
   * @generated from field: string index_id = 1;
   */
  indexId = "";

  constructor(data?: PartialMessage<ListExperimentalIndexFilesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ListExperimentalIndexFilesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListExperimentalIndexFilesRequest {
    return new ListExperimentalIndexFilesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListExperimentalIndexFilesRequest {
    return new ListExperimentalIndexFilesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListExperimentalIndexFilesRequest {
    return new ListExperimentalIndexFilesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListExperimentalIndexFilesRequest | PlainMessage<ListExperimentalIndexFilesRequest> | undefined, b: ListExperimentalIndexFilesRequest | PlainMessage<ListExperimentalIndexFilesRequest> | undefined): boolean {
    return proto3.util.equals(ListExperimentalIndexFilesRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.ListExperimentalIndexFilesResponse
 */
export class ListExperimentalIndexFilesResponse extends Message<ListExperimentalIndexFilesResponse> {
  /**
   * @generated from field: string index_id = 1;
   */
  indexId = "";

  /**
   * @generated from field: repeated aiserver.v1.IndexFileData files = 2;
   */
  files: IndexFileData[] = [];

  constructor(data?: PartialMessage<ListExperimentalIndexFilesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ListExperimentalIndexFilesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "files", kind: "message", T: IndexFileData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListExperimentalIndexFilesResponse {
    return new ListExperimentalIndexFilesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListExperimentalIndexFilesResponse {
    return new ListExperimentalIndexFilesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListExperimentalIndexFilesResponse {
    return new ListExperimentalIndexFilesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListExperimentalIndexFilesResponse | PlainMessage<ListExperimentalIndexFilesResponse> | undefined, b: ListExperimentalIndexFilesResponse | PlainMessage<ListExperimentalIndexFilesResponse> | undefined): boolean {
    return proto3.util.equals(ListExperimentalIndexFilesResponse, a, b);
  }
}

/**
 * @generated from message aiserver.v1.ListenExperimentalIndexRequest
 */
export class ListenExperimentalIndexRequest extends Message<ListenExperimentalIndexRequest> {
  /**
   * @generated from field: string index_id = 1;
   */
  indexId = "";

  constructor(data?: PartialMessage<ListenExperimentalIndexRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ListenExperimentalIndexRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListenExperimentalIndexRequest {
    return new ListenExperimentalIndexRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListenExperimentalIndexRequest {
    return new ListenExperimentalIndexRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListenExperimentalIndexRequest {
    return new ListenExperimentalIndexRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListenExperimentalIndexRequest | PlainMessage<ListenExperimentalIndexRequest> | undefined, b: ListenExperimentalIndexRequest | PlainMessage<ListenExperimentalIndexRequest> | undefined): boolean {
    return proto3.util.equals(ListenExperimentalIndexRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.ListenExperimentalIndexResponse
 */
export class ListenExperimentalIndexResponse extends Message<ListenExperimentalIndexResponse> {
  /**
   * @generated from field: string index_id = 1;
   */
  indexId = "";

  /**
   * @generated from oneof aiserver.v1.ListenExperimentalIndexResponse.item
   */
  item: {
    /**
     * @generated from field: aiserver.v1.ListenExperimentalIndexResponse.ReadyItem ready = 2;
     */
    value: ListenExperimentalIndexResponse_ReadyItem;
    case: "ready";
  } | {
    /**
     * @generated from field: aiserver.v1.ListenExperimentalIndexResponse.RegisterItem register = 3;
     */
    value: ListenExperimentalIndexResponse_RegisterItem;
    case: "register";
  } | {
    /**
     * @generated from field: aiserver.v1.ListenExperimentalIndexResponse.ChooseItem choose = 4;
     */
    value: ListenExperimentalIndexResponse_ChooseItem;
    case: "choose";
  } | {
    /**
     * @generated from field: aiserver.v1.ListenExperimentalIndexResponse.SummarizeItem summarize = 5;
     */
    value: ListenExperimentalIndexResponse_SummarizeItem;
    case: "summarize";
  } | {
    /**
     * @generated from field: aiserver.v1.ListenExperimentalIndexResponse.ErrorItem error = 6;
     */
    value: ListenExperimentalIndexResponse_ErrorItem;
    case: "error";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ListenExperimentalIndexResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ListenExperimentalIndexResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ready", kind: "message", T: ListenExperimentalIndexResponse_ReadyItem, oneof: "item" },
    { no: 3, name: "register", kind: "message", T: ListenExperimentalIndexResponse_RegisterItem, oneof: "item" },
    { no: 4, name: "choose", kind: "message", T: ListenExperimentalIndexResponse_ChooseItem, oneof: "item" },
    { no: 5, name: "summarize", kind: "message", T: ListenExperimentalIndexResponse_SummarizeItem, oneof: "item" },
    { no: 6, name: "error", kind: "message", T: ListenExperimentalIndexResponse_ErrorItem, oneof: "item" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListenExperimentalIndexResponse {
    return new ListenExperimentalIndexResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListenExperimentalIndexResponse {
    return new ListenExperimentalIndexResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListenExperimentalIndexResponse {
    return new ListenExperimentalIndexResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListenExperimentalIndexResponse | PlainMessage<ListenExperimentalIndexResponse> | undefined, b: ListenExperimentalIndexResponse | PlainMessage<ListenExperimentalIndexResponse> | undefined): boolean {
    return proto3.util.equals(ListenExperimentalIndexResponse, a, b);
  }
}

/**
 * @generated from message aiserver.v1.ListenExperimentalIndexResponse.ReadyItem
 */
export class ListenExperimentalIndexResponse_ReadyItem extends Message<ListenExperimentalIndexResponse_ReadyItem> {
  /**
   * @generated from field: string index_id = 1;
   */
  indexId = "";

  /**
   * @generated from field: aiserver.v1.ListenExperimentalIndexRequest request = 2;
   */
  request?: ListenExperimentalIndexRequest;

  constructor(data?: PartialMessage<ListenExperimentalIndexResponse_ReadyItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ListenExperimentalIndexResponse.ReadyItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request", kind: "message", T: ListenExperimentalIndexRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListenExperimentalIndexResponse_ReadyItem {
    return new ListenExperimentalIndexResponse_ReadyItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListenExperimentalIndexResponse_ReadyItem {
    return new ListenExperimentalIndexResponse_ReadyItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListenExperimentalIndexResponse_ReadyItem {
    return new ListenExperimentalIndexResponse_ReadyItem().fromJsonString(jsonString, options);
  }

  static equals(a: ListenExperimentalIndexResponse_ReadyItem | PlainMessage<ListenExperimentalIndexResponse_ReadyItem> | undefined, b: ListenExperimentalIndexResponse_ReadyItem | PlainMessage<ListenExperimentalIndexResponse_ReadyItem> | undefined): boolean {
    return proto3.util.equals(ListenExperimentalIndexResponse_ReadyItem, a, b);
  }
}

/**
 * @generated from message aiserver.v1.ListenExperimentalIndexResponse.RegisterItem
 */
export class ListenExperimentalIndexResponse_RegisterItem extends Message<ListenExperimentalIndexResponse_RegisterItem> {
  /**
   * @generated from field: aiserver.v1.RegisterFileToIndexResponse response = 1;
   */
  response?: RegisterFileToIndexResponse;

  /**
   * @generated from field: aiserver.v1.RegisterFileToIndexRequest request = 2;
   */
  request?: RegisterFileToIndexRequest;

  /**
   * @generated from field: string req_uuid = 3;
   */
  reqUuid = "";

  constructor(data?: PartialMessage<ListenExperimentalIndexResponse_RegisterItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ListenExperimentalIndexResponse.RegisterItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: RegisterFileToIndexResponse },
    { no: 2, name: "request", kind: "message", T: RegisterFileToIndexRequest },
    { no: 3, name: "req_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListenExperimentalIndexResponse_RegisterItem {
    return new ListenExperimentalIndexResponse_RegisterItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListenExperimentalIndexResponse_RegisterItem {
    return new ListenExperimentalIndexResponse_RegisterItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListenExperimentalIndexResponse_RegisterItem {
    return new ListenExperimentalIndexResponse_RegisterItem().fromJsonString(jsonString, options);
  }

  static equals(a: ListenExperimentalIndexResponse_RegisterItem | PlainMessage<ListenExperimentalIndexResponse_RegisterItem> | undefined, b: ListenExperimentalIndexResponse_RegisterItem | PlainMessage<ListenExperimentalIndexResponse_RegisterItem> | undefined): boolean {
    return proto3.util.equals(ListenExperimentalIndexResponse_RegisterItem, a, b);
  }
}

/**
 * @generated from message aiserver.v1.ListenExperimentalIndexResponse.ChooseItem
 */
export class ListenExperimentalIndexResponse_ChooseItem extends Message<ListenExperimentalIndexResponse_ChooseItem> {
  /**
   * @generated from field: aiserver.v1.ChooseCodeReferencesResponse response = 1;
   */
  response?: ChooseCodeReferencesResponse;

  /**
   * @generated from field: aiserver.v1.ChooseCodeReferencesRequest request = 2;
   */
  request?: ChooseCodeReferencesRequest;

  /**
   * @generated from field: string req_uuid = 3;
   */
  reqUuid = "";

  constructor(data?: PartialMessage<ListenExperimentalIndexResponse_ChooseItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ListenExperimentalIndexResponse.ChooseItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: ChooseCodeReferencesResponse },
    { no: 2, name: "request", kind: "message", T: ChooseCodeReferencesRequest },
    { no: 3, name: "req_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListenExperimentalIndexResponse_ChooseItem {
    return new ListenExperimentalIndexResponse_ChooseItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListenExperimentalIndexResponse_ChooseItem {
    return new ListenExperimentalIndexResponse_ChooseItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListenExperimentalIndexResponse_ChooseItem {
    return new ListenExperimentalIndexResponse_ChooseItem().fromJsonString(jsonString, options);
  }

  static equals(a: ListenExperimentalIndexResponse_ChooseItem | PlainMessage<ListenExperimentalIndexResponse_ChooseItem> | undefined, b: ListenExperimentalIndexResponse_ChooseItem | PlainMessage<ListenExperimentalIndexResponse_ChooseItem> | undefined): boolean {
    return proto3.util.equals(ListenExperimentalIndexResponse_ChooseItem, a, b);
  }
}

/**
 * @generated from message aiserver.v1.ListenExperimentalIndexResponse.SummarizeItem
 */
export class ListenExperimentalIndexResponse_SummarizeItem extends Message<ListenExperimentalIndexResponse_SummarizeItem> {
  /**
   * @generated from field: aiserver.v1.SummarizeWithReferencesResponse response = 1;
   */
  response?: SummarizeWithReferencesResponse;

  /**
   * @generated from field: aiserver.v1.SummarizeWithReferencesRequest request = 2;
   */
  request?: SummarizeWithReferencesRequest;

  /**
   * @generated from field: string req_uuid = 3;
   */
  reqUuid = "";

  constructor(data?: PartialMessage<ListenExperimentalIndexResponse_SummarizeItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ListenExperimentalIndexResponse.SummarizeItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: SummarizeWithReferencesResponse },
    { no: 2, name: "request", kind: "message", T: SummarizeWithReferencesRequest },
    { no: 3, name: "req_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListenExperimentalIndexResponse_SummarizeItem {
    return new ListenExperimentalIndexResponse_SummarizeItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListenExperimentalIndexResponse_SummarizeItem {
    return new ListenExperimentalIndexResponse_SummarizeItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListenExperimentalIndexResponse_SummarizeItem {
    return new ListenExperimentalIndexResponse_SummarizeItem().fromJsonString(jsonString, options);
  }

  static equals(a: ListenExperimentalIndexResponse_SummarizeItem | PlainMessage<ListenExperimentalIndexResponse_SummarizeItem> | undefined, b: ListenExperimentalIndexResponse_SummarizeItem | PlainMessage<ListenExperimentalIndexResponse_SummarizeItem> | undefined): boolean {
    return proto3.util.equals(ListenExperimentalIndexResponse_SummarizeItem, a, b);
  }
}

/**
 * @generated from message aiserver.v1.ListenExperimentalIndexResponse.ErrorItem
 */
export class ListenExperimentalIndexResponse_ErrorItem extends Message<ListenExperimentalIndexResponse_ErrorItem> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: int32 status_code = 2;
   */
  statusCode = 0;

  /**
   * @generated from oneof aiserver.v1.ListenExperimentalIndexResponse.ErrorItem.request
   */
  request: {
    /**
     * @generated from field: aiserver.v1.RegisterFileToIndexRequest register = 3;
     */
    value: RegisterFileToIndexRequest;
    case: "register";
  } | {
    /**
     * @generated from field: aiserver.v1.ChooseCodeReferencesRequest choose = 4;
     */
    value: ChooseCodeReferencesRequest;
    case: "choose";
  } | {
    /**
     * @generated from field: aiserver.v1.SummarizeWithReferencesRequest summarize = 5;
     */
    value: SummarizeWithReferencesRequest;
    case: "summarize";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: string req_uuid = 6;
   */
  reqUuid = "";

  constructor(data?: PartialMessage<ListenExperimentalIndexResponse_ErrorItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ListenExperimentalIndexResponse.ErrorItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status_code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "register", kind: "message", T: RegisterFileToIndexRequest, oneof: "request" },
    { no: 4, name: "choose", kind: "message", T: ChooseCodeReferencesRequest, oneof: "request" },
    { no: 5, name: "summarize", kind: "message", T: SummarizeWithReferencesRequest, oneof: "request" },
    { no: 6, name: "req_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListenExperimentalIndexResponse_ErrorItem {
    return new ListenExperimentalIndexResponse_ErrorItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListenExperimentalIndexResponse_ErrorItem {
    return new ListenExperimentalIndexResponse_ErrorItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListenExperimentalIndexResponse_ErrorItem {
    return new ListenExperimentalIndexResponse_ErrorItem().fromJsonString(jsonString, options);
  }

  static equals(a: ListenExperimentalIndexResponse_ErrorItem | PlainMessage<ListenExperimentalIndexResponse_ErrorItem> | undefined, b: ListenExperimentalIndexResponse_ErrorItem | PlainMessage<ListenExperimentalIndexResponse_ErrorItem> | undefined): boolean {
    return proto3.util.equals(ListenExperimentalIndexResponse_ErrorItem, a, b);
  }
}

/**
 * @generated from message aiserver.v1.RegisterFileToIndexRequest
 */
export class RegisterFileToIndexRequest extends Message<RegisterFileToIndexRequest> {
  /**
   * @generated from field: string index_id = 1;
   */
  indexId = "";

  /**
   * @generated from field: string workspace_relative_path = 2;
   */
  workspaceRelativePath = "";

  /**
   * @generated from field: aiserver.v1.SerializedContextNode root_context_node = 3;
   */
  rootContextNode?: SerializedContextNode;

  /**
   * @generated from field: repeated string content = 4;
   */
  content: string[] = [];

  constructor(data?: PartialMessage<RegisterFileToIndexRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RegisterFileToIndexRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "workspace_relative_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "root_context_node", kind: "message", T: SerializedContextNode },
    { no: 4, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterFileToIndexRequest {
    return new RegisterFileToIndexRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterFileToIndexRequest {
    return new RegisterFileToIndexRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterFileToIndexRequest {
    return new RegisterFileToIndexRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterFileToIndexRequest | PlainMessage<RegisterFileToIndexRequest> | undefined, b: RegisterFileToIndexRequest | PlainMessage<RegisterFileToIndexRequest> | undefined): boolean {
    return proto3.util.equals(RegisterFileToIndexRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.RegisterFileToIndexResponse
 */
export class RegisterFileToIndexResponse extends Message<RegisterFileToIndexResponse> {
  /**
   * @generated from field: string file_id = 1;
   */
  fileId = "";

  /**
   * @generated from field: string root_context_node_id = 2;
   */
  rootContextNodeId = "";

  /**
   * @generated from field: repeated aiserver.v1.URIResolutionAttempt dependency_resolution_attempts = 3;
   */
  dependencyResolutionAttempts: URIResolutionAttempt[] = [];

  /**
   * @generated from field: aiserver.v1.IndexFileData file_data = 4;
   */
  fileData?: IndexFileData;

  constructor(data?: PartialMessage<RegisterFileToIndexResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RegisterFileToIndexResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "root_context_node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dependency_resolution_attempts", kind: "message", T: URIResolutionAttempt, repeated: true },
    { no: 4, name: "file_data", kind: "message", T: IndexFileData },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterFileToIndexResponse {
    return new RegisterFileToIndexResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterFileToIndexResponse {
    return new RegisterFileToIndexResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterFileToIndexResponse {
    return new RegisterFileToIndexResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterFileToIndexResponse | PlainMessage<RegisterFileToIndexResponse> | undefined, b: RegisterFileToIndexResponse | PlainMessage<RegisterFileToIndexResponse> | undefined): boolean {
    return proto3.util.equals(RegisterFileToIndexResponse, a, b);
  }
}

/**
 * @generated from message aiserver.v1.SetupIndexDependenciesRequest
 */
export class SetupIndexDependenciesRequest extends Message<SetupIndexDependenciesRequest> {
  /**
   * @generated from field: string index_id = 1;
   */
  indexId = "";

  /**
   * @generated from field: string file_id = 3;
   */
  fileId = "";

  /**
   * @generated from field: repeated aiserver.v1.URIResolutionResult dependency_resolution_results = 2;
   */
  dependencyResolutionResults: URIResolutionResult[] = [];

  constructor(data?: PartialMessage<SetupIndexDependenciesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.SetupIndexDependenciesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "file_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dependency_resolution_results", kind: "message", T: URIResolutionResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetupIndexDependenciesRequest {
    return new SetupIndexDependenciesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetupIndexDependenciesRequest {
    return new SetupIndexDependenciesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetupIndexDependenciesRequest {
    return new SetupIndexDependenciesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetupIndexDependenciesRequest | PlainMessage<SetupIndexDependenciesRequest> | undefined, b: SetupIndexDependenciesRequest | PlainMessage<SetupIndexDependenciesRequest> | undefined): boolean {
    return proto3.util.equals(SetupIndexDependenciesRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.SetupIndexDependenciesResponse
 */
export class SetupIndexDependenciesResponse extends Message<SetupIndexDependenciesResponse> {
  constructor(data?: PartialMessage<SetupIndexDependenciesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.SetupIndexDependenciesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetupIndexDependenciesResponse {
    return new SetupIndexDependenciesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetupIndexDependenciesResponse {
    return new SetupIndexDependenciesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetupIndexDependenciesResponse {
    return new SetupIndexDependenciesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetupIndexDependenciesResponse | PlainMessage<SetupIndexDependenciesResponse> | undefined, b: SetupIndexDependenciesResponse | PlainMessage<SetupIndexDependenciesResponse> | undefined): boolean {
    return proto3.util.equals(SetupIndexDependenciesResponse, a, b);
  }
}

/**
 * @generated from message aiserver.v1.ComputeIndexTopoSortRequest
 */
export class ComputeIndexTopoSortRequest extends Message<ComputeIndexTopoSortRequest> {
  /**
   * @generated from field: string index_id = 1;
   */
  indexId = "";

  constructor(data?: PartialMessage<ComputeIndexTopoSortRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ComputeIndexTopoSortRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComputeIndexTopoSortRequest {
    return new ComputeIndexTopoSortRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComputeIndexTopoSortRequest {
    return new ComputeIndexTopoSortRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComputeIndexTopoSortRequest {
    return new ComputeIndexTopoSortRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ComputeIndexTopoSortRequest | PlainMessage<ComputeIndexTopoSortRequest> | undefined, b: ComputeIndexTopoSortRequest | PlainMessage<ComputeIndexTopoSortRequest> | undefined): boolean {
    return proto3.util.equals(ComputeIndexTopoSortRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.ComputeIndexTopoSortResponse
 */
export class ComputeIndexTopoSortResponse extends Message<ComputeIndexTopoSortResponse> {
  constructor(data?: PartialMessage<ComputeIndexTopoSortResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ComputeIndexTopoSortResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComputeIndexTopoSortResponse {
    return new ComputeIndexTopoSortResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComputeIndexTopoSortResponse {
    return new ComputeIndexTopoSortResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComputeIndexTopoSortResponse {
    return new ComputeIndexTopoSortResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ComputeIndexTopoSortResponse | PlainMessage<ComputeIndexTopoSortResponse> | undefined, b: ComputeIndexTopoSortResponse | PlainMessage<ComputeIndexTopoSortResponse> | undefined): boolean {
    return proto3.util.equals(ComputeIndexTopoSortResponse, a, b);
  }
}

/**
 * @generated from message aiserver.v1.ChooseCodeReferencesRequest
 */
export class ChooseCodeReferencesRequest extends Message<ChooseCodeReferencesRequest> {
  /**
   * @generated from field: string index_id = 1;
   */
  indexId = "";

  /**
   * @generated from oneof aiserver.v1.ChooseCodeReferencesRequest.request
   */
  request: {
    /**
     * @generated from field: aiserver.v1.ChooseCodeReferencesRequest.FileRequest file = 2;
     */
    value: ChooseCodeReferencesRequest_FileRequest;
    case: "file";
  } | {
    /**
     * @generated from field: aiserver.v1.ChooseCodeReferencesRequest.NodeRequest node = 3;
     */
    value: ChooseCodeReferencesRequest_NodeRequest;
    case: "node";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: bool recompute = 4;
   */
  recompute = false;

  constructor(data?: PartialMessage<ChooseCodeReferencesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ChooseCodeReferencesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "file", kind: "message", T: ChooseCodeReferencesRequest_FileRequest, oneof: "request" },
    { no: 3, name: "node", kind: "message", T: ChooseCodeReferencesRequest_NodeRequest, oneof: "request" },
    { no: 4, name: "recompute", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChooseCodeReferencesRequest {
    return new ChooseCodeReferencesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChooseCodeReferencesRequest {
    return new ChooseCodeReferencesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChooseCodeReferencesRequest {
    return new ChooseCodeReferencesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ChooseCodeReferencesRequest | PlainMessage<ChooseCodeReferencesRequest> | undefined, b: ChooseCodeReferencesRequest | PlainMessage<ChooseCodeReferencesRequest> | undefined): boolean {
    return proto3.util.equals(ChooseCodeReferencesRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.ChooseCodeReferencesRequest.FileRequest
 */
export class ChooseCodeReferencesRequest_FileRequest extends Message<ChooseCodeReferencesRequest_FileRequest> {
  /**
   * @generated from field: string file_id = 1;
   */
  fileId = "";

  constructor(data?: PartialMessage<ChooseCodeReferencesRequest_FileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ChooseCodeReferencesRequest.FileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChooseCodeReferencesRequest_FileRequest {
    return new ChooseCodeReferencesRequest_FileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChooseCodeReferencesRequest_FileRequest {
    return new ChooseCodeReferencesRequest_FileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChooseCodeReferencesRequest_FileRequest {
    return new ChooseCodeReferencesRequest_FileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ChooseCodeReferencesRequest_FileRequest | PlainMessage<ChooseCodeReferencesRequest_FileRequest> | undefined, b: ChooseCodeReferencesRequest_FileRequest | PlainMessage<ChooseCodeReferencesRequest_FileRequest> | undefined): boolean {
    return proto3.util.equals(ChooseCodeReferencesRequest_FileRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.ChooseCodeReferencesRequest.NodeRequest
 */
export class ChooseCodeReferencesRequest_NodeRequest extends Message<ChooseCodeReferencesRequest_NodeRequest> {
  /**
   * @generated from field: string node_id = 1;
   */
  nodeId = "";

  constructor(data?: PartialMessage<ChooseCodeReferencesRequest_NodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ChooseCodeReferencesRequest.NodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChooseCodeReferencesRequest_NodeRequest {
    return new ChooseCodeReferencesRequest_NodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChooseCodeReferencesRequest_NodeRequest {
    return new ChooseCodeReferencesRequest_NodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChooseCodeReferencesRequest_NodeRequest {
    return new ChooseCodeReferencesRequest_NodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ChooseCodeReferencesRequest_NodeRequest | PlainMessage<ChooseCodeReferencesRequest_NodeRequest> | undefined, b: ChooseCodeReferencesRequest_NodeRequest | PlainMessage<ChooseCodeReferencesRequest_NodeRequest> | undefined): boolean {
    return proto3.util.equals(ChooseCodeReferencesRequest_NodeRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.ChooseCodeReferencesResponse
 */
export class ChooseCodeReferencesResponse extends Message<ChooseCodeReferencesResponse> {
  /**
   * @generated from oneof aiserver.v1.ChooseCodeReferencesResponse.response
   */
  response: {
    /**
     * @generated from field: aiserver.v1.ChooseCodeReferencesResponse.FileResponse file = 1;
     */
    value: ChooseCodeReferencesResponse_FileResponse;
    case: "file";
  } | {
    /**
     * @generated from field: aiserver.v1.ChooseCodeReferencesResponse.NodeResponse node = 2;
     */
    value: ChooseCodeReferencesResponse_NodeResponse;
    case: "node";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ChooseCodeReferencesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ChooseCodeReferencesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file", kind: "message", T: ChooseCodeReferencesResponse_FileResponse, oneof: "response" },
    { no: 2, name: "node", kind: "message", T: ChooseCodeReferencesResponse_NodeResponse, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChooseCodeReferencesResponse {
    return new ChooseCodeReferencesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChooseCodeReferencesResponse {
    return new ChooseCodeReferencesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChooseCodeReferencesResponse {
    return new ChooseCodeReferencesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ChooseCodeReferencesResponse | PlainMessage<ChooseCodeReferencesResponse> | undefined, b: ChooseCodeReferencesResponse | PlainMessage<ChooseCodeReferencesResponse> | undefined): boolean {
    return proto3.util.equals(ChooseCodeReferencesResponse, a, b);
  }
}

/**
 * @generated from message aiserver.v1.ChooseCodeReferencesResponse.NodeResponse
 */
export class ChooseCodeReferencesResponse_NodeResponse extends Message<ChooseCodeReferencesResponse_NodeResponse> {
  /**
   * @generated from field: string node_id = 1;
   */
  nodeId = "";

  /**
   * @generated from field: repeated aiserver.v1.CodeSymbolWithAction actions = 2;
   */
  actions: CodeSymbolWithAction[] = [];

  /**
   * @generated from field: bool skipped = 3;
   */
  skipped = false;

  /**
   * @generated from field: repeated string dependencies = 4;
   */
  dependencies: string[] = [];

  constructor(data?: PartialMessage<ChooseCodeReferencesResponse_NodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ChooseCodeReferencesResponse.NodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "actions", kind: "message", T: CodeSymbolWithAction, repeated: true },
    { no: 3, name: "skipped", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "dependencies", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChooseCodeReferencesResponse_NodeResponse {
    return new ChooseCodeReferencesResponse_NodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChooseCodeReferencesResponse_NodeResponse {
    return new ChooseCodeReferencesResponse_NodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChooseCodeReferencesResponse_NodeResponse {
    return new ChooseCodeReferencesResponse_NodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ChooseCodeReferencesResponse_NodeResponse | PlainMessage<ChooseCodeReferencesResponse_NodeResponse> | undefined, b: ChooseCodeReferencesResponse_NodeResponse | PlainMessage<ChooseCodeReferencesResponse_NodeResponse> | undefined): boolean {
    return proto3.util.equals(ChooseCodeReferencesResponse_NodeResponse, a, b);
  }
}

/**
 * @generated from message aiserver.v1.ChooseCodeReferencesResponse.FileResponse
 */
export class ChooseCodeReferencesResponse_FileResponse extends Message<ChooseCodeReferencesResponse_FileResponse> {
  /**
   * @generated from field: string file_id = 1;
   */
  fileId = "";

  /**
   * @generated from field: repeated aiserver.v1.ChooseCodeReferencesResponse.NodeResponse node_responses = 2;
   */
  nodeResponses: ChooseCodeReferencesResponse_NodeResponse[] = [];

  constructor(data?: PartialMessage<ChooseCodeReferencesResponse_FileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ChooseCodeReferencesResponse.FileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "node_responses", kind: "message", T: ChooseCodeReferencesResponse_NodeResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChooseCodeReferencesResponse_FileResponse {
    return new ChooseCodeReferencesResponse_FileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChooseCodeReferencesResponse_FileResponse {
    return new ChooseCodeReferencesResponse_FileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChooseCodeReferencesResponse_FileResponse {
    return new ChooseCodeReferencesResponse_FileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ChooseCodeReferencesResponse_FileResponse | PlainMessage<ChooseCodeReferencesResponse_FileResponse> | undefined, b: ChooseCodeReferencesResponse_FileResponse | PlainMessage<ChooseCodeReferencesResponse_FileResponse> | undefined): boolean {
    return proto3.util.equals(ChooseCodeReferencesResponse_FileResponse, a, b);
  }
}

/**
 * @generated from message aiserver.v1.RegisterCodeReferencesRequest
 */
export class RegisterCodeReferencesRequest extends Message<RegisterCodeReferencesRequest> {
  /**
   * @generated from field: string node_id = 1;
   */
  nodeId = "";

  /**
   * @generated from field: repeated aiserver.v1.SymbolActionResults references = 2;
   */
  references: SymbolActionResults[] = [];

  constructor(data?: PartialMessage<RegisterCodeReferencesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RegisterCodeReferencesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "references", kind: "message", T: SymbolActionResults, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterCodeReferencesRequest {
    return new RegisterCodeReferencesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterCodeReferencesRequest {
    return new RegisterCodeReferencesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterCodeReferencesRequest {
    return new RegisterCodeReferencesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterCodeReferencesRequest | PlainMessage<RegisterCodeReferencesRequest> | undefined, b: RegisterCodeReferencesRequest | PlainMessage<RegisterCodeReferencesRequest> | undefined): boolean {
    return proto3.util.equals(RegisterCodeReferencesRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.RegisterCodeReferencesResponse
 */
export class RegisterCodeReferencesResponse extends Message<RegisterCodeReferencesResponse> {
  /**
   * @generated from field: repeated string dependencies = 1;
   */
  dependencies: string[] = [];

  constructor(data?: PartialMessage<RegisterCodeReferencesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RegisterCodeReferencesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dependencies", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterCodeReferencesResponse {
    return new RegisterCodeReferencesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterCodeReferencesResponse {
    return new RegisterCodeReferencesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterCodeReferencesResponse {
    return new RegisterCodeReferencesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterCodeReferencesResponse | PlainMessage<RegisterCodeReferencesResponse> | undefined, b: RegisterCodeReferencesResponse | PlainMessage<RegisterCodeReferencesResponse> | undefined): boolean {
    return proto3.util.equals(RegisterCodeReferencesResponse, a, b);
  }
}

/**
 * @generated from message aiserver.v1.SummarizeWithReferencesRequest
 */
export class SummarizeWithReferencesRequest extends Message<SummarizeWithReferencesRequest> {
  /**
   * @generated from field: string index_id = 1;
   */
  indexId = "";

  /**
   * @generated from field: string node_id = 2;
   */
  nodeId = "";

  /**
   * @generated from field: bool recompute = 3;
   */
  recompute = false;

  constructor(data?: PartialMessage<SummarizeWithReferencesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.SummarizeWithReferencesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "recompute", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SummarizeWithReferencesRequest {
    return new SummarizeWithReferencesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SummarizeWithReferencesRequest {
    return new SummarizeWithReferencesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SummarizeWithReferencesRequest {
    return new SummarizeWithReferencesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SummarizeWithReferencesRequest | PlainMessage<SummarizeWithReferencesRequest> | undefined, b: SummarizeWithReferencesRequest | PlainMessage<SummarizeWithReferencesRequest> | undefined): boolean {
    return proto3.util.equals(SummarizeWithReferencesRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.SummarizeWithReferencesResponse
 */
export class SummarizeWithReferencesResponse extends Message<SummarizeWithReferencesResponse> {
  /**
   * @generated from oneof aiserver.v1.SummarizeWithReferencesResponse.response
   */
  response: {
    /**
     * @generated from field: aiserver.v1.SummarizeWithReferencesResponse.Success success = 1;
     */
    value: SummarizeWithReferencesResponse_Success;
    case: "success";
  } | {
    /**
     * @generated from field: aiserver.v1.SummarizeWithReferencesResponse.Dependency dependency = 2;
     */
    value: SummarizeWithReferencesResponse_Dependency;
    case: "dependency";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: string node_id = 3;
   */
  nodeId = "";

  constructor(data?: PartialMessage<SummarizeWithReferencesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.SummarizeWithReferencesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "message", T: SummarizeWithReferencesResponse_Success, oneof: "response" },
    { no: 2, name: "dependency", kind: "message", T: SummarizeWithReferencesResponse_Dependency, oneof: "response" },
    { no: 3, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SummarizeWithReferencesResponse {
    return new SummarizeWithReferencesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SummarizeWithReferencesResponse {
    return new SummarizeWithReferencesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SummarizeWithReferencesResponse {
    return new SummarizeWithReferencesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SummarizeWithReferencesResponse | PlainMessage<SummarizeWithReferencesResponse> | undefined, b: SummarizeWithReferencesResponse | PlainMessage<SummarizeWithReferencesResponse> | undefined): boolean {
    return proto3.util.equals(SummarizeWithReferencesResponse, a, b);
  }
}

/**
 * @generated from message aiserver.v1.SummarizeWithReferencesResponse.Success
 */
export class SummarizeWithReferencesResponse_Success extends Message<SummarizeWithReferencesResponse_Success> {
  /**
   * @generated from field: string summary = 1;
   */
  summary = "";

  constructor(data?: PartialMessage<SummarizeWithReferencesResponse_Success>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.SummarizeWithReferencesResponse.Success";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "summary", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SummarizeWithReferencesResponse_Success {
    return new SummarizeWithReferencesResponse_Success().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SummarizeWithReferencesResponse_Success {
    return new SummarizeWithReferencesResponse_Success().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SummarizeWithReferencesResponse_Success {
    return new SummarizeWithReferencesResponse_Success().fromJsonString(jsonString, options);
  }

  static equals(a: SummarizeWithReferencesResponse_Success | PlainMessage<SummarizeWithReferencesResponse_Success> | undefined, b: SummarizeWithReferencesResponse_Success | PlainMessage<SummarizeWithReferencesResponse_Success> | undefined): boolean {
    return proto3.util.equals(SummarizeWithReferencesResponse_Success, a, b);
  }
}

/**
 * @generated from message aiserver.v1.SummarizeWithReferencesResponse.Dependency
 */
export class SummarizeWithReferencesResponse_Dependency extends Message<SummarizeWithReferencesResponse_Dependency> {
  /**
   * @generated from field: repeated string nodes = 2;
   */
  nodes: string[] = [];

  constructor(data?: PartialMessage<SummarizeWithReferencesResponse_Dependency>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.SummarizeWithReferencesResponse.Dependency";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "nodes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SummarizeWithReferencesResponse_Dependency {
    return new SummarizeWithReferencesResponse_Dependency().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SummarizeWithReferencesResponse_Dependency {
    return new SummarizeWithReferencesResponse_Dependency().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SummarizeWithReferencesResponse_Dependency {
    return new SummarizeWithReferencesResponse_Dependency().fromJsonString(jsonString, options);
  }

  static equals(a: SummarizeWithReferencesResponse_Dependency | PlainMessage<SummarizeWithReferencesResponse_Dependency> | undefined, b: SummarizeWithReferencesResponse_Dependency | PlainMessage<SummarizeWithReferencesResponse_Dependency> | undefined): boolean {
    return proto3.util.equals(SummarizeWithReferencesResponse_Dependency, a, b);
  }
}

/**
 * @generated from message aiserver.v1.RequestReceivedResponse
 */
export class RequestReceivedResponse extends Message<RequestReceivedResponse> {
  /**
   * @generated from field: string req_uuid = 1;
   */
  reqUuid = "";

  constructor(data?: PartialMessage<RequestReceivedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RequestReceivedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "req_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestReceivedResponse {
    return new RequestReceivedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestReceivedResponse {
    return new RequestReceivedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestReceivedResponse {
    return new RequestReceivedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RequestReceivedResponse | PlainMessage<RequestReceivedResponse> | undefined, b: RequestReceivedResponse | PlainMessage<RequestReceivedResponse> | undefined): boolean {
    return proto3.util.equals(RequestReceivedResponse, a, b);
  }
}

/**
 * @generated from message aiserver.v1.ReflectionData
 */
export class ReflectionData extends Message<ReflectionData> {
  /**
   * @generated from field: string index_id = 1;
   */
  indexId = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: string summary = 3;
   */
  summary = "";

  constructor(data?: PartialMessage<ReflectionData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ReflectionData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "summary", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReflectionData {
    return new ReflectionData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReflectionData {
    return new ReflectionData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReflectionData {
    return new ReflectionData().fromJsonString(jsonString, options);
  }

  static equals(a: ReflectionData | PlainMessage<ReflectionData> | undefined, b: ReflectionData | PlainMessage<ReflectionData> | undefined): boolean {
    return proto3.util.equals(ReflectionData, a, b);
  }
}

/**
 * @generated from message aiserver.v1.IndexFileData
 */
export class IndexFileData extends Message<IndexFileData> {
  /**
   * @generated from field: string index_id = 1;
   */
  indexId = "";

  /**
   * @generated from field: string workspace_relative_path = 2;
   */
  workspaceRelativePath = "";

  /**
   * @generated from field: string stage = 3;
   */
  stage = "";

  /**
   * @generated from field: int32 order = 4;
   */
  order = 0;

  /**
   * @generated from field: repeated aiserver.v1.IndexFileData.NodeData nodes = 5;
   */
  nodes: IndexFileData_NodeData[] = [];

  constructor(data?: PartialMessage<IndexFileData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.IndexFileData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "workspace_relative_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "stage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "order", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "nodes", kind: "message", T: IndexFileData_NodeData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IndexFileData {
    return new IndexFileData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IndexFileData {
    return new IndexFileData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IndexFileData {
    return new IndexFileData().fromJsonString(jsonString, options);
  }

  static equals(a: IndexFileData | PlainMessage<IndexFileData> | undefined, b: IndexFileData | PlainMessage<IndexFileData> | undefined): boolean {
    return proto3.util.equals(IndexFileData, a, b);
  }
}

/**
 * @generated from message aiserver.v1.IndexFileData.NodeData
 */
export class IndexFileData_NodeData extends Message<IndexFileData_NodeData> {
  /**
   * @generated from field: string node_id = 1;
   */
  nodeId = "";

  /**
   * @generated from field: string stage = 2;
   */
  stage = "";

  /**
   * @generated from field: string content = 3;
   */
  content = "";

  /**
   * @generated from field: string summary = 4;
   */
  summary = "";

  constructor(data?: PartialMessage<IndexFileData_NodeData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.IndexFileData.NodeData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "stage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "summary", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IndexFileData_NodeData {
    return new IndexFileData_NodeData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IndexFileData_NodeData {
    return new IndexFileData_NodeData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IndexFileData_NodeData {
    return new IndexFileData_NodeData().fromJsonString(jsonString, options);
  }

  static equals(a: IndexFileData_NodeData | PlainMessage<IndexFileData_NodeData> | undefined, b: IndexFileData_NodeData | PlainMessage<IndexFileData_NodeData> | undefined): boolean {
    return proto3.util.equals(IndexFileData_NodeData, a, b);
  }
}

/**
 * @generated from message aiserver.v1.SerializedContextNode
 */
export class SerializedContextNode extends Message<SerializedContextNode> {
  /**
   * @generated from field: string workspace_relative_path = 1;
   */
  workspaceRelativePath = "";

  /**
   * @generated from field: int32 start_line_number = 2;
   */
  startLineNumber = 0;

  /**
   * @generated from field: int32 end_line_number = 3;
   */
  endLineNumber = 0;

  /**
   * @generated from field: repeated aiserver.v1.SerializedContextNode children = 4;
   */
  children: SerializedContextNode[] = [];

  /**
   * @generated from field: aiserver.v1.FileCodeSnippets node_snippets = 5;
   */
  nodeSnippets?: FileCodeSnippets;

  constructor(data?: PartialMessage<SerializedContextNode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.SerializedContextNode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_relative_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start_line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "end_line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "children", kind: "message", T: SerializedContextNode, repeated: true },
    { no: 5, name: "node_snippets", kind: "message", T: FileCodeSnippets },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerializedContextNode {
    return new SerializedContextNode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerializedContextNode {
    return new SerializedContextNode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerializedContextNode {
    return new SerializedContextNode().fromJsonString(jsonString, options);
  }

  static equals(a: SerializedContextNode | PlainMessage<SerializedContextNode> | undefined, b: SerializedContextNode | PlainMessage<SerializedContextNode> | undefined): boolean {
    return proto3.util.equals(SerializedContextNode, a, b);
  }
}

/**
 * @generated from message aiserver.v1.URIResolutionAttempt
 */
export class URIResolutionAttempt extends Message<URIResolutionAttempt> {
  /**
   * @generated from field: string workspace_relative_path = 1;
   */
  workspaceRelativePath = "";

  /**
   * @generated from field: string node_id = 2;
   */
  nodeId = "";

  /**
   * @generated from field: aiserver.v1.CodeSymbolWithAction symbol = 3;
   */
  symbol?: CodeSymbolWithAction;

  constructor(data?: PartialMessage<URIResolutionAttempt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.URIResolutionAttempt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_relative_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "symbol", kind: "message", T: CodeSymbolWithAction },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): URIResolutionAttempt {
    return new URIResolutionAttempt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): URIResolutionAttempt {
    return new URIResolutionAttempt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): URIResolutionAttempt {
    return new URIResolutionAttempt().fromJsonString(jsonString, options);
  }

  static equals(a: URIResolutionAttempt | PlainMessage<URIResolutionAttempt> | undefined, b: URIResolutionAttempt | PlainMessage<URIResolutionAttempt> | undefined): boolean {
    return proto3.util.equals(URIResolutionAttempt, a, b);
  }
}

/**
 * @generated from message aiserver.v1.URIResolutionResult
 */
export class URIResolutionResult extends Message<URIResolutionResult> {
  /**
   * @generated from field: aiserver.v1.URIResolutionAttempt request = 1;
   */
  request?: URIResolutionAttempt;

  /**
   * @generated from field: repeated string resolved_paths = 2;
   */
  resolvedPaths: string[] = [];

  constructor(data?: PartialMessage<URIResolutionResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.URIResolutionResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "message", T: URIResolutionAttempt },
    { no: 2, name: "resolved_paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): URIResolutionResult {
    return new URIResolutionResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): URIResolutionResult {
    return new URIResolutionResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): URIResolutionResult {
    return new URIResolutionResult().fromJsonString(jsonString, options);
  }

  static equals(a: URIResolutionResult | PlainMessage<URIResolutionResult> | undefined, b: URIResolutionResult | PlainMessage<URIResolutionResult> | undefined): boolean {
    return proto3.util.equals(URIResolutionResult, a, b);
  }
}

/**
 * @generated from message aiserver.v1.ExtractPathsRequest
 */
export class ExtractPathsRequest extends Message<ExtractPathsRequest> {
  /**
   * @generated from field: aiserver.v1.FileCodeSnippets file_code_snippets = 1;
   */
  fileCodeSnippets?: FileCodeSnippets;

  constructor(data?: PartialMessage<ExtractPathsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ExtractPathsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_code_snippets", kind: "message", T: FileCodeSnippets },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExtractPathsRequest {
    return new ExtractPathsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExtractPathsRequest {
    return new ExtractPathsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExtractPathsRequest {
    return new ExtractPathsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExtractPathsRequest | PlainMessage<ExtractPathsRequest> | undefined, b: ExtractPathsRequest | PlainMessage<ExtractPathsRequest> | undefined): boolean {
    return proto3.util.equals(ExtractPathsRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.ExtractPathsResponse
 */
export class ExtractPathsResponse extends Message<ExtractPathsResponse> {
  /**
   * @generated from field: repeated aiserver.v1.CodeSymbolWithAction paths = 1;
   */
  paths: CodeSymbolWithAction[] = [];

  constructor(data?: PartialMessage<ExtractPathsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ExtractPathsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "paths", kind: "message", T: CodeSymbolWithAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExtractPathsResponse {
    return new ExtractPathsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExtractPathsResponse {
    return new ExtractPathsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExtractPathsResponse {
    return new ExtractPathsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExtractPathsResponse | PlainMessage<ExtractPathsResponse> | undefined, b: ExtractPathsResponse | PlainMessage<ExtractPathsResponse> | undefined): boolean {
    return proto3.util.equals(ExtractPathsResponse, a, b);
  }
}

/**
 * @generated from message aiserver.v1.SymbolActionResults
 */
export class SymbolActionResults extends Message<SymbolActionResults> {
  /**
   * @generated from field: aiserver.v1.CodeSymbolWithAction action = 1;
   */
  action?: CodeSymbolWithAction;

  /**
   * @generated from field: repeated aiserver.v1.SymbolActionResultReference references = 2;
   */
  references: SymbolActionResultReference[] = [];

  constructor(data?: PartialMessage<SymbolActionResults>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.SymbolActionResults";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "action", kind: "message", T: CodeSymbolWithAction },
    { no: 2, name: "references", kind: "message", T: SymbolActionResultReference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SymbolActionResults {
    return new SymbolActionResults().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SymbolActionResults {
    return new SymbolActionResults().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SymbolActionResults {
    return new SymbolActionResults().fromJsonString(jsonString, options);
  }

  static equals(a: SymbolActionResults | PlainMessage<SymbolActionResults> | undefined, b: SymbolActionResults | PlainMessage<SymbolActionResults> | undefined): boolean {
    return proto3.util.equals(SymbolActionResults, a, b);
  }
}

/**
 * @generated from message aiserver.v1.SymbolActionResultReference
 */
export class SymbolActionResultReference extends Message<SymbolActionResultReference> {
  /**
   * @generated from field: aiserver.v1.SimpleRange range = 1;
   */
  range?: SimpleRange;

  /**
   * @generated from field: aiserver.v1.FileCodeSnippets reference = 2;
   */
  reference?: FileCodeSnippets;

  constructor(data?: PartialMessage<SymbolActionResultReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.SymbolActionResultReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "range", kind: "message", T: SimpleRange },
    { no: 2, name: "reference", kind: "message", T: FileCodeSnippets },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SymbolActionResultReference {
    return new SymbolActionResultReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SymbolActionResultReference {
    return new SymbolActionResultReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SymbolActionResultReference {
    return new SymbolActionResultReference().fromJsonString(jsonString, options);
  }

  static equals(a: SymbolActionResultReference | PlainMessage<SymbolActionResultReference> | undefined, b: SymbolActionResultReference | PlainMessage<SymbolActionResultReference> | undefined): boolean {
    return proto3.util.equals(SymbolActionResultReference, a, b);
  }
}

/**
 * @generated from message aiserver.v1.FileCodeSnippets
 */
export class FileCodeSnippets extends Message<FileCodeSnippets> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: int32 total_lines = 2;
   */
  totalLines = 0;

  /**
   * @generated from field: repeated aiserver.v1.CodeSnippet snippets = 3;
   */
  snippets: CodeSnippet[] = [];

  constructor(data?: PartialMessage<FileCodeSnippets>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.FileCodeSnippets";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "total_lines", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "snippets", kind: "message", T: CodeSnippet, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FileCodeSnippets {
    return new FileCodeSnippets().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FileCodeSnippets {
    return new FileCodeSnippets().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FileCodeSnippets {
    return new FileCodeSnippets().fromJsonString(jsonString, options);
  }

  static equals(a: FileCodeSnippets | PlainMessage<FileCodeSnippets> | undefined, b: FileCodeSnippets | PlainMessage<FileCodeSnippets> | undefined): boolean {
    return proto3.util.equals(FileCodeSnippets, a, b);
  }
}

/**
 * @generated from message aiserver.v1.CodeSnippet
 */
export class CodeSnippet extends Message<CodeSnippet> {
  /**
   * @generated from field: int32 start_line_number = 1;
   */
  startLineNumber = 0;

  /**
   * @generated from field: int32 end_line_number = 2;
   */
  endLineNumber = 0;

  /**
   * @generated from field: repeated string lines = 3;
   */
  lines: string[] = [];

  constructor(data?: PartialMessage<CodeSnippet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CodeSnippet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "end_line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "lines", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeSnippet {
    return new CodeSnippet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeSnippet {
    return new CodeSnippet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeSnippet {
    return new CodeSnippet().fromJsonString(jsonString, options);
  }

  static equals(a: CodeSnippet | PlainMessage<CodeSnippet> | undefined, b: CodeSnippet | PlainMessage<CodeSnippet> | undefined): boolean {
    return proto3.util.equals(CodeSnippet, a, b);
  }
}

/**
 * @generated from message aiserver.v1.CodeSymbolWithAction
 */
export class CodeSymbolWithAction extends Message<CodeSymbolWithAction> {
  /**
   * @generated from field: string workspace_relative_path = 1;
   */
  workspaceRelativePath = "";

  /**
   * @generated from field: int32 line_number = 2;
   */
  lineNumber = 0;

  /**
   * @generated from field: int32 symbol_start_column = 3;
   */
  symbolStartColumn = 0;

  /**
   * @generated from field: int32 symbol_end_column = 4;
   */
  symbolEndColumn = 0;

  /**
   * @generated from field: aiserver.v1.CodeSymbolWithAction.CodeSymbolAction action = 5;
   */
  action = CodeSymbolWithAction_CodeSymbolAction.UNSPECIFIED;

  /**
   * @generated from field: string symbol = 6;
   */
  symbol = "";

  constructor(data?: PartialMessage<CodeSymbolWithAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CodeSymbolWithAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_relative_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "symbol_start_column", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "symbol_end_column", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "action", kind: "enum", T: proto3.getEnumType(CodeSymbolWithAction_CodeSymbolAction) },
    { no: 6, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeSymbolWithAction {
    return new CodeSymbolWithAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeSymbolWithAction {
    return new CodeSymbolWithAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeSymbolWithAction {
    return new CodeSymbolWithAction().fromJsonString(jsonString, options);
  }

  static equals(a: CodeSymbolWithAction | PlainMessage<CodeSymbolWithAction> | undefined, b: CodeSymbolWithAction | PlainMessage<CodeSymbolWithAction> | undefined): boolean {
    return proto3.util.equals(CodeSymbolWithAction, a, b);
  }
}

/**
 * @generated from enum aiserver.v1.CodeSymbolWithAction.CodeSymbolAction
 */
export enum CodeSymbolWithAction_CodeSymbolAction {
  /**
   * @generated from enum value: CODE_SYMBOL_ACTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CODE_SYMBOL_ACTION_GO_TO_DEFINITION = 1;
   */
  GO_TO_DEFINITION = 1,

  /**
   * @generated from enum value: CODE_SYMBOL_ACTION_GO_TO_IMPLEMENTATION = 2;
   */
  GO_TO_IMPLEMENTATION = 2,

  /**
   * @generated from enum value: CODE_SYMBOL_ACTION_REFERENCES = 3;
   */
  REFERENCES = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(CodeSymbolWithAction_CodeSymbolAction)
proto3.util.setEnumType(CodeSymbolWithAction_CodeSymbolAction, "aiserver.v1.CodeSymbolWithAction.CodeSymbolAction", [
  { no: 0, name: "CODE_SYMBOL_ACTION_UNSPECIFIED" },
  { no: 1, name: "CODE_SYMBOL_ACTION_GO_TO_DEFINITION" },
  { no: 2, name: "CODE_SYMBOL_ACTION_GO_TO_IMPLEMENTATION" },
  { no: 3, name: "CODE_SYMBOL_ACTION_REFERENCES" },
]);

