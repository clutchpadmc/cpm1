// @generated by protoc-gen-connect-web v0.6.0 with parameter "target=ts"
// @generated from file aiserver/v1/repository.proto (package aiserver.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AdminRemoveRepositoryRequest, AdminRemoveRepositoryResponse, BatchRepositoryStatusRequest, BatchRepositoryStatusResponse, FastRepoInitHandshakeRequest, FastRepoInitHandshakeResponse, FastUpdateFileRequest, FastUpdateFileResponse, FinishUpdateRepoRequest, FinishUpdateRepoResponse, FinishUploadRepoRequest, FinishUploadRepoResponse, GetAvailableChunkingStrategiesRequest, GetAvailableChunkingStrategiesResponse, GetEmbeddingsRequest, GetEmbeddingsResponse, GetNumFilesToSendRequest, GetNumFilesToSendResponse, GetUploadLimitsRequest, GetUploadLimitsResponse, IsLoggedInRequest, IsLoggedInResponse, LoginRequest, LoginResponse, LogoutRequest, LogoutResponse, PollLoginRequest, PollLoginResponse, RemoveRepositoryRequest, RemoveRepositoryResponse, RepositoriesRequest, RepositoriesResponse, RepositoryStatusRequest, RepositoryStatusResponse, SearchRepositoryDeepContextRequest, SearchRepositoryDeepContextResponse, SearchRepositoryRequest, SearchRepositoryResponse, StartUpdateRepoRequest, StartUpdateRepoResponse, StartUploadRepoRequest, StartUploadRepoResponse, SubscribeRepositoryRequest, SubscribeRepositoryResponse, SyncMerkleSubtreeRequest, SyncMerkleSubtreeResponse, SyncRepositoryRequest, SyncRepositoryResponse, UnsubscribeRepositoryRequest, UnsubscribeRepositoryResponse, UpdateFileRequest, UpdateFileResponse, UpgradeScopeRequest, UpgradeScopeResponse, UploadFileRequest, UploadFileResponse, UploadRepositoryRequest, UploadRepositoryResponse } from './repository_pb';
import { MethodKind } from "@bufbuild/protobuf";

/**
 * // MARK: fast endpoints for indexing.
 *
 * @generated from service aiserver.v1.RepositoryService
 */
export const RepositoryService = {
  typeName: "aiserver.v1.RepositoryService",
  methods: {
    /**
     * flow: called when the process is restarted, i.e. when you have no local information about the server,
     *
     * @generated from rpc aiserver.v1.RepositoryService.FastRepoInitHandshake
     */
    fastRepoInitHandshake: {
      name: "FastRepoInitHandshake",
      I: FastRepoInitHandshakeRequest,
      O: FastRepoInitHandshakeResponse,
      kind: MethodKind.Unary,
    },
    /**
     * flow: you get to send the hash starting from the root and can keep sending requests to find all the leaves that mismatch.
     *
     * @generated from rpc aiserver.v1.RepositoryService.SyncMerkleSubtree
     */
    syncMerkleSubtree: {
      name: "SyncMerkleSubtree",
      I: SyncMerkleSubtreeRequest,
      O: SyncMerkleSubtreeResponse,
      kind: MethodKind.Unary,
    },
    /**
     * fast endpoints for updating the merkle tree with files and deleting files
     *
     * @generated from rpc aiserver.v1.RepositoryService.FastUpdateFile
     */
    fastUpdateFile: {
      name: "FastUpdateFile",
      I: FastUpdateFileRequest,
      O: FastUpdateFileResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Endpoinst that handle uploading when doing "local" indexing
     *
     * @generated from rpc aiserver.v1.RepositoryService.StartUploadRepo
     */
    startUploadRepo: {
      name: "StartUploadRepo",
      I: StartUploadRepoRequest,
      O: StartUploadRepoResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.RepositoryService.UploadFile
     */
    uploadFile: {
      name: "UploadFile",
      I: UploadFileRequest,
      O: UploadFileResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.RepositoryService.FinishUploadRepo
     */
    finishUploadRepo: {
      name: "FinishUploadRepo",
      I: FinishUploadRepoRequest,
      O: FinishUploadRepoResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.RepositoryService.GetEmbeddings
     */
    getEmbeddings: {
      name: "GetEmbeddings",
      I: GetEmbeddingsRequest,
      O: GetEmbeddingsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Endpoint that handles syncing with doing "local" indexing
     *
     * @generated from rpc aiserver.v1.RepositoryService.StartUpdateRepo
     */
    startUpdateRepo: {
      name: "StartUpdateRepo",
      I: StartUpdateRepoRequest,
      O: StartUpdateRepoResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.RepositoryService.UpdateFile
     */
    updateFile: {
      name: "UpdateFile",
      I: UpdateFileRequest,
      O: UpdateFileResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.RepositoryService.FinishUpdateRepo
     */
    finishUpdateRepo: {
      name: "FinishUpdateRepo",
      I: FinishUpdateRepoRequest,
      O: FinishUpdateRepoResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.RepositoryService.SearchRepositoryDeepContext
     */
    searchRepositoryDeepContext: {
      name: "SearchRepositoryDeepContext",
      I: SearchRepositoryDeepContextRequest,
      O: SearchRepositoryDeepContextResponse,
      kind: MethodKind.Unary,
    },
    /**
     * This endpoint gives the current status of a repo. It tells us if it is
     * in sync, up to date, or out of sync.
     *
     * @generated from rpc aiserver.v1.RepositoryService.RepositoryStatus
     */
    repositoryStatus: {
      name: "RepositoryStatus",
      I: RepositoryStatusRequest,
      O: RepositoryStatusResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.RepositoryService.BatchRepositoryStatus
     */
    batchRepositoryStatus: {
      name: "BatchRepositoryStatus",
      I: BatchRepositoryStatusRequest,
      O: BatchRepositoryStatusResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Searches a repository
     *
     * @generated from rpc aiserver.v1.RepositoryService.SearchRepository
     */
    searchRepository: {
      name: "SearchRepository",
      I: SearchRepositoryRequest,
      O: SearchRepositoryResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Remove repository request
     *
     * @generated from rpc aiserver.v1.RepositoryService.RemoveRepository
     */
    removeRepository: {
      name: "RemoveRepository",
      I: RemoveRepositoryRequest,
      O: RemoveRepositoryResponse,
      kind: MethodKind.Unary,
    },
    /**
     * / MARK: utitlity endpoints for controlling the flow of indexing
     *
     * @generated from rpc aiserver.v1.RepositoryService.GetUploadLimits
     */
    getUploadLimits: {
      name: "GetUploadLimits",
      I: GetUploadLimitsRequest,
      O: GetUploadLimitsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * SUPERCEDES GetUploadLimits. allows adaptive limits for people.
     *
     * @generated from rpc aiserver.v1.RepositoryService.GetNumFilesToSend
     */
    getNumFilesToSend: {
      name: "GetNumFilesToSend",
      I: GetNumFilesToSendRequest,
      O: GetNumFilesToSendResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.RepositoryService.GetAvailableChunkingStrategies
     */
    getAvailableChunkingStrategies: {
      name: "GetAvailableChunkingStrategies",
      I: GetAvailableChunkingStrategiesRequest,
      O: GetAvailableChunkingStrategiesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Specific to us. not used in the client. allows deleting a codebase.
     *
     * @generated from rpc aiserver.v1.RepositoryService.AdminRemoveRepository
     */
    adminRemoveRepository: {
      name: "AdminRemoveRepository",
      I: AdminRemoveRepositoryRequest,
      O: AdminRemoveRepositoryResponse,
      kind: MethodKind.Unary,
    },
    /**
     * This endpoint returns a list of available repositories
     *
     * @generated from rpc aiserver.v1.RepositoryService.GetRepositories
     */
    getRepositories: {
      name: "GetRepositories",
      I: RepositoriesRequest,
      O: RepositoriesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * This endpoint is responsible for logging the user into the repository
     * provider (usually github)
     *
     * @generated from rpc aiserver.v1.RepositoryService.LoginUser
     */
    loginUser: {
      name: "LoginUser",
      I: LoginRequest,
      O: LoginResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.RepositoryService.LogoutUser
     */
    logoutUser: {
      name: "LogoutUser",
      I: LogoutRequest,
      O: LogoutResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.RepositoryService.IsLoggedIn
     */
    isLoggedIn: {
      name: "IsLoggedIn",
      I: IsLoggedInRequest,
      O: IsLoggedInResponse,
      kind: MethodKind.Unary,
    },
    /**
     * This endpoint consistently polls the server to check if the user has
     * been logged in. When it turns out that they are, we return a success
     *
     * @generated from rpc aiserver.v1.RepositoryService.PollLoggedIn
     */
    pollLoggedIn: {
      name: "PollLoggedIn",
      I: PollLoginRequest,
      O: PollLoginResponse,
      kind: MethodKind.Unary,
    },
    /**
     * This endpoint lets the user choose to upgrade their scope
     * in order to access private repositories
     *
     * @generated from rpc aiserver.v1.RepositoryService.UpgradeScope
     */
    upgradeScope: {
      name: "UpgradeScope",
      I: UpgradeScopeRequest,
      O: UpgradeScopeResponse,
      kind: MethodKind.Unary,
    },
    /**
     * sync github
     *
     * @generated from rpc aiserver.v1.RepositoryService.SyncRepository
     */
    syncRepository: {
      name: "SyncRepository",
      I: SyncRepositoryRequest,
      O: SyncRepositoryResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Upload Repository
     * Deprecated: This API is deprecated and may be removed in the future.
     *
     * @generated from rpc aiserver.v1.RepositoryService.UploadRepository
     */
    uploadRepository: {
      name: "UploadRepository",
      I: UploadRepositoryRequest,
      O: UploadRepositoryResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Subscribes a user to uploaded repository
     * Deprecated: This API is deprecated and may be removed in the future.
     *
     * @generated from rpc aiserver.v1.RepositoryService.SubscribeRepository
     */
    subscribeRepository: {
      name: "SubscribeRepository",
      I: SubscribeRepositoryRequest,
      O: SubscribeRepositoryResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Deprecated: This API is deprecated and may be removed in the future.
     *
     * @generated from rpc aiserver.v1.RepositoryService.UnsubscribeRepository
     */
    unsubscribeRepository: {
      name: "UnsubscribeRepository",
      I: UnsubscribeRepositoryRequest,
      O: UnsubscribeRepositoryResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

