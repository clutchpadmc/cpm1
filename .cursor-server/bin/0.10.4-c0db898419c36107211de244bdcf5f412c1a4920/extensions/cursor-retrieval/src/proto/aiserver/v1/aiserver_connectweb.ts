// @generated by protoc-gen-connect-web v0.6.0 with parameter "target=ts"
// @generated from file aiserver/v1/aiserver.proto (package aiserver.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AiProjectRequest, AiProjectResponse, AvailableDocsRequest, AvailableDocsResponse, CheckDoableAsTaskRequest, CheckDoableAsTaskResponse, CheckLongFilesFitResponse, CheckQueuePositionRequest, CheckQueuePositionResponse, ClearAndRedoEntireBucketRequest, ClearAndRedoEntireBucketResponse, DoThisForMeCheckRequest, DoThisForMeCheckResponse, DoThisForMeRequest, DoThisForMeResponseWrapped, FixMarkersRequest, FixMarkersResponse, GetChatRequest, GetChatTitleRequest, GetChatTitleResponse, GetCompletionRequest, GetCompletionResponse, GetEvaluationPromptRequest, GetEvaluationPromptResponse, GetSearchRequest, GetSearchResponse, GetSimplePromptRequest, GetSimplePromptResponse, GetUserInfoRequest, GetUserInfoResponse, HealthCheckRequest, HealthCheckResponse, IntentPredictionRequest, IntentPredictionResponse, InterfaceAgentInitRequest, InterfaceAgentInitResponse, LogLinterExplicitUserFeedbackRequest, LogLinterExplicitUserFeedbackResponse, LogUserLintReplyRequest, LogUserLintReplyResponse, ModelQueryRequest, ModelQueryResponse, PreloadEditRequest, PreloadEditResponse, ReportBugRequest, ReportBugResponse, ReportCmdKFateRequest, ReportCmdKFateResponse, ReportFeedbackRequest, ReportFeedbackResponse, ReportGroundTruthCandidateRequest, ReportGroundTruthCandidateResponse, RerankerRequest, RerankerResponse, StreamAiLintBugRequest, StreamAiLintBugResponse, StreamBackgroundEditRequest, StreamChatContextRequest, StreamChatContextResponse, StreamChatDeepContextRequest, StreamChatDeepContextResponse, StreamChatResponse, StreamChatToolformerContinueRequest, StreamChatToolformerResponse, StreamCursorTutorRequest, StreamCursorTutorResponse, StreamEditRequest, StreamFastEditRequest, StreamFastEditResponse, StreamGenerateRequest, StreamGPTFourEditRequest, StreamInlineEditsRequest, StreamInlineEditsResponse, StreamInterfaceAgentStatusRequest, StreamInterfaceAgentStatusResponse, StreamLintRequest, StreamNewRuleRequest, StreamPriomptPromptRequest, StreamPriomptPromptResponse, SummarizeConversationResponse, TaskGetInterfaceAgentStatusRequest, TaskGetInterfaceAgentStatusResponseWrapped, TaskInfoRequest, TaskInfoResponse, TaskInitRequest, TaskInitResponse, TaskPauseRequest, TaskPauseResponse, TaskProvideResultRequest, TaskProvideResultResponse, TaskSendMessageRequest, TaskSendMessageResponse, TaskStreamChatContextRequest, TaskStreamChatContextResponseWrapped, TaskStreamLogRequest, TaskStreamLogResponse, ThrowErrorCheckRequest, ThrowErrorCheckResponse, TimeLeftHealthCheckResponse, ToCamelCaseRequest, ToCamelCaseResponse } from './aiserver_pb';
import { MethodKind } from "@bufbuild/protobuf";
import { StreamInlineLongCompletionRequest } from './inline_gpt4_pb';
import { ChooseCodeReferencesRequest, ComputeIndexTopoSortRequest, ComputeIndexTopoSortResponse, CreateExperimentalIndexRequest, CreateExperimentalIndexResponse, ExtractPathsRequest, ExtractPathsResponse, ListenExperimentalIndexRequest, ListenExperimentalIndexResponse, ListExperimentalIndexFilesRequest, ListExperimentalIndexFilesResponse, RegisterCodeReferencesRequest, RegisterCodeReferencesResponse, RegisterFileToIndexRequest, RequestReceivedResponse, SetupIndexDependenciesRequest, SetupIndexDependenciesResponse, SummarizeWithReferencesRequest } from './symbolic_context_pb';
import { DocumentationQueryRequest, DocumentationQueryResponse } from './docs_pb';
import { ReportInlineActionRequest, ReportInlineActionResponse } from './telemetry_pb';

/**
 * @generated from service aiserver.v1.AiService
 */
export const AiService = {
  typeName: "aiserver.v1.AiService",
  methods: {
    /**
     * @generated from rpc aiserver.v1.AiService.HealthCheck
     */
    healthCheck: {
      name: "HealthCheck",
      I: HealthCheckRequest,
      O: HealthCheckResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.TimeLeftHealthCheck
     */
    timeLeftHealthCheck: {
      name: "TimeLeftHealthCheck",
      I: HealthCheckRequest,
      O: TimeLeftHealthCheckResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.ThrowErrorCheck
     */
    throwErrorCheck: {
      name: "ThrowErrorCheck",
      I: ThrowErrorCheckRequest,
      O: ThrowErrorCheckResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.StreamChatTryReallyHard
     */
    streamChatTryReallyHard: {
      name: "StreamChatTryReallyHard",
      I: GetChatRequest,
      O: StreamChatResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.GetChatTitle
     */
    getChatTitle: {
      name: "GetChatTitle",
      I: GetChatTitleRequest,
      O: GetChatTitleResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.GetCompletion
     */
    getCompletion: {
      name: "GetCompletion",
      I: GetCompletionRequest,
      O: GetCompletionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.GetSearch
     */
    getSearch: {
      name: "GetSearch",
      I: GetSearchRequest,
      O: GetSearchResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.StreamInlineEdits
     */
    streamInlineEdits: {
      name: "StreamInlineEdits",
      I: StreamInlineEditsRequest,
      O: StreamInlineEditsResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.SummarizeConversation
     */
    summarizeConversation: {
      name: "SummarizeConversation",
      I: GetChatRequest,
      O: SummarizeConversationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.GetSimplePrompt
     */
    getSimplePrompt: {
      name: "GetSimplePrompt",
      I: GetSimplePromptRequest,
      O: GetSimplePromptResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.CheckLongFilesFit
     */
    checkLongFilesFit: {
      name: "CheckLongFilesFit",
      I: GetChatRequest,
      O: CheckLongFilesFitResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.GetEvaluationPrompt
     */
    getEvaluationPrompt: {
      name: "GetEvaluationPrompt",
      I: GetEvaluationPromptRequest,
      O: GetEvaluationPromptResponse,
      kind: MethodKind.Unary,
    },
    /**
     * user info may contain a number of different things
     *
     * @generated from rpc aiserver.v1.AiService.GetUserInfo
     */
    getUserInfo: {
      name: "GetUserInfo",
      I: GetUserInfoRequest,
      O: GetUserInfoResponse,
      kind: MethodKind.Unary,
    },
    /**
     * embedding commands
     * these should need special authentication
     *
     * @generated from rpc aiserver.v1.AiService.ClearAndRedoEntireBucket
     */
    clearAndRedoEntireBucket: {
      name: "ClearAndRedoEntireBucket",
      I: ClearAndRedoEntireBucketRequest,
      O: ClearAndRedoEntireBucketResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.StreamBackgroundEdit
     */
    streamBackgroundEdit: {
      name: "StreamBackgroundEdit",
      I: StreamBackgroundEditRequest,
      O: StreamChatResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.StreamGPTFourEdit
     */
    streamGPTFourEdit: {
      name: "StreamGPTFourEdit",
      I: StreamGPTFourEditRequest,
      O: StreamChatResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.StreamChat
     */
    streamChat: {
      name: "StreamChat",
      I: GetChatRequest,
      O: StreamChatResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.StreamEdit
     */
    streamEdit: {
      name: "StreamEdit",
      I: StreamEditRequest,
      O: StreamChatResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.PreloadEdit
     */
    preloadEdit: {
      name: "PreloadEdit",
      I: PreloadEditRequest,
      O: PreloadEditResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.StreamFastEdit
     */
    streamFastEdit: {
      name: "StreamFastEdit",
      I: StreamFastEditRequest,
      O: StreamFastEditResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.StreamGenerate
     */
    streamGenerate: {
      name: "StreamGenerate",
      I: StreamGenerateRequest,
      O: StreamChatResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.StreamInlineLongCompletion
     */
    streamInlineLongCompletion: {
      name: "StreamInlineLongCompletion",
      I: StreamInlineLongCompletionRequest,
      O: StreamChatResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Checking queue position
     *
     * @generated from rpc aiserver.v1.AiService.CheckQueuePosition
     */
    checkQueuePosition: {
      name: "CheckQueuePosition",
      I: CheckQueuePositionRequest,
      O: CheckQueuePositionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.DoThisForMeCheck
     */
    doThisForMeCheck: {
      name: "DoThisForMeCheck",
      I: DoThisForMeCheckRequest,
      O: DoThisForMeCheckResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.StreamDoThisForMe
     */
    streamDoThisForMe: {
      name: "StreamDoThisForMe",
      I: DoThisForMeRequest,
      O: DoThisForMeResponseWrapped,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Toolformer!
     *
     * @generated from rpc aiserver.v1.AiService.StreamChatToolformer
     */
    streamChatToolformer: {
      name: "StreamChatToolformer",
      I: GetChatRequest,
      O: StreamChatToolformerResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * StreamChatToolformerContinue is used to continue the toolformer invokation
     * after running a local tool
     *
     * @generated from rpc aiserver.v1.AiService.StreamChatToolformerContinue
     */
    streamChatToolformerContinue: {
      name: "StreamChatToolformerContinue",
      I: StreamChatToolformerContinueRequest,
      O: StreamChatToolformerResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.CheckDoableAsTask
     */
    checkDoableAsTask: {
      name: "CheckDoableAsTask",
      I: CheckDoableAsTaskRequest,
      O: CheckDoableAsTaskResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.ReportGroundTruthCandidate
     */
    reportGroundTruthCandidate: {
      name: "ReportGroundTruthCandidate",
      I: ReportGroundTruthCandidateRequest,
      O: ReportGroundTruthCandidateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.ReportCmdKFate
     */
    reportCmdKFate: {
      name: "ReportCmdKFate",
      I: ReportCmdKFateRequest,
      O: ReportCmdKFateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ----------------------------------
     * Interface agent (you implement a *.ai.ts, you can start the
     * interface agent to go do your work for you)
     * ----------------------------------
     *
     * @generated from rpc aiserver.v1.AiService.InterfaceAgentInit
     */
    interfaceAgentInit: {
      name: "InterfaceAgentInit",
      I: InterfaceAgentInitRequest,
      O: InterfaceAgentInitResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.StreamInterfaceAgentStatus
     */
    streamInterfaceAgentStatus: {
      name: "StreamInterfaceAgentStatus",
      I: StreamInterfaceAgentStatusRequest,
      O: StreamInterfaceAgentStatusResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * a "TaskGet" method has a special meaning.
     * it is implemented as a task, which means that the request can take actions
     * in the client while producing its response therefore, it is technically a
     * streaming RPC, with exactly two messages: (1) just the task uuid to connect
     * to, and (2) the actual response
     *
     * @generated from rpc aiserver.v1.AiService.TaskGetInterfaceAgentStatus
     */
    taskGetInterfaceAgentStatus: {
      name: "TaskGetInterfaceAgentStatus",
      I: TaskGetInterfaceAgentStatusRequest,
      O: TaskGetInterfaceAgentStatusResponseWrapped,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * task data model:
     *
     * on the server we store the task state, which the user never really sees.
     * this is everything that's needed to continue executing the task, and is
     * generally stored in memory but may also be persisted to disk on the server
     * we also store an append-only task log, which the client can listen to. this
     * append-only log is a chronological time-line of everything that happened.
     * the server is the source of truth here
     *
     * we init a task with a task instruction, and get back a task id
     * TODO: we want to support specific chains for a task too
     *
     * @generated from rpc aiserver.v1.AiService.TaskInit
     */
    taskInit: {
      name: "TaskInit",
      I: TaskInitRequest,
      O: TaskInitResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.TaskPause
     */
    taskPause: {
      name: "TaskPause",
      I: TaskPauseRequest,
      O: TaskPauseResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.TaskInfo
     */
    taskInfo: {
      name: "TaskInfo",
      I: TaskInfoRequest,
      O: TaskInfoResponse,
      kind: MethodKind.Unary,
    },
    /**
     * we can listen to a specific task id (only the user who created the task
     * can) this listens to the task log, which (for now) is append-only (so
     * people can cache if they want to) this will return an error if the user
     * does not have permissions to listen to the given task this will first
     * return the *current* task state, and then stream the log the stream ends
     * when: (done || paused) && (last log item has been delivered)
     *
     * @generated from rpc aiserver.v1.AiService.TaskStreamLog
     */
    taskStreamLog: {
      name: "TaskStreamLog",
      I: TaskStreamLogRequest,
      O: TaskStreamLogResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * the user can interrupt the task with a message
     *
     * @generated from rpc aiserver.v1.AiService.TaskSendMessage
     */
    taskSendMessage: {
      name: "TaskSendMessage",
      I: TaskSendMessageRequest,
      O: TaskSendMessageResponse,
      kind: MethodKind.Unary,
    },
    /**
     * we call taskprovideresult when providing a result from an action to the
     * task
     *
     * @generated from rpc aiserver.v1.AiService.TaskProvideResult
     */
    taskProvideResult: {
      name: "TaskProvideResult",
      I: TaskProvideResultRequest,
      O: TaskProvideResultResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.CreateExperimentalIndex
     */
    createExperimentalIndex: {
      name: "CreateExperimentalIndex",
      I: CreateExperimentalIndexRequest,
      O: CreateExperimentalIndexResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.ListExperimentalIndexFiles
     */
    listExperimentalIndexFiles: {
      name: "ListExperimentalIndexFiles",
      I: ListExperimentalIndexFilesRequest,
      O: ListExperimentalIndexFilesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.ListenExperimentalIndex
     */
    listenExperimentalIndex: {
      name: "ListenExperimentalIndex",
      I: ListenExperimentalIndexRequest,
      O: ListenExperimentalIndexResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.RegisterFileToIndex
     */
    registerFileToIndex: {
      name: "RegisterFileToIndex",
      I: RegisterFileToIndexRequest,
      O: RequestReceivedResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.SetupIndexDependencies
     */
    setupIndexDependencies: {
      name: "SetupIndexDependencies",
      I: SetupIndexDependenciesRequest,
      O: SetupIndexDependenciesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.ComputeIndexTopoSort
     */
    computeIndexTopoSort: {
      name: "ComputeIndexTopoSort",
      I: ComputeIndexTopoSortRequest,
      O: ComputeIndexTopoSortResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.StreamChatDeepContext
     */
    streamChatDeepContext: {
      name: "StreamChatDeepContext",
      I: StreamChatDeepContextRequest,
      O: StreamChatDeepContextResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Choosing references to expand (go-to actions)
     *
     * @generated from rpc aiserver.v1.AiService.ChooseCodeReferences
     */
    chooseCodeReferences: {
      name: "ChooseCodeReferences",
      I: ChooseCodeReferencesRequest,
      O: RequestReceivedResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.RegisterCodeReferences
     */
    registerCodeReferences: {
      name: "RegisterCodeReferences",
      I: RegisterCodeReferencesRequest,
      O: RegisterCodeReferencesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.ExtractPaths
     */
    extractPaths: {
      name: "ExtractPaths",
      I: ExtractPathsRequest,
      O: ExtractPathsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Summarizing Code Snippet with expanded references
     *
     * @generated from rpc aiserver.v1.AiService.SummarizeWithReferences
     */
    summarizeWithReferences: {
      name: "SummarizeWithReferences",
      I: SummarizeWithReferencesRequest,
      O: RequestReceivedResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.DocumentationQuery
     */
    documentationQuery: {
      name: "DocumentationQuery",
      I: DocumentationQueryRequest,
      O: DocumentationQueryResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.AvailableDocs
     */
    availableDocs: {
      name: "AvailableDocs",
      I: AvailableDocsRequest,
      O: AvailableDocsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.ReportFeedback
     */
    reportFeedback: {
      name: "ReportFeedback",
      I: ReportFeedbackRequest,
      O: ReportFeedbackResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.ReportBug
     */
    reportBug: {
      name: "ReportBug",
      I: ReportBugRequest,
      O: ReportBugResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.StreamChatContext
     */
    streamChatContext: {
      name: "StreamChatContext",
      I: StreamChatContextRequest,
      O: StreamChatContextResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * the TaskStream has a special meaning
     * it creates a background task that allows this endpoint to take actions in
     * the editor this is potentially quite useful
     *
     * @generated from rpc aiserver.v1.AiService.TaskStreamChatContext
     */
    taskStreamChatContext: {
      name: "TaskStreamChatContext",
      I: TaskStreamChatContextRequest,
      O: TaskStreamChatContextResponseWrapped,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.RerankResults
     */
    rerankResults: {
      name: "RerankResults",
      I: RerankerRequest,
      O: RerankerResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.ModelQuery
     */
    modelQuery: {
      name: "ModelQuery",
      I: ModelQueryRequest,
      O: ModelQueryResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.IntentPrediction
     */
    intentPrediction: {
      name: "IntentPrediction",
      I: IntentPredictionRequest,
      O: IntentPredictionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.StreamCursorTutor
     */
    streamCursorTutor: {
      name: "StreamCursorTutor",
      I: StreamCursorTutorRequest,
      O: StreamCursorTutorResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * lint!
     * we stream back a lint result
     * the linter may spawn background tasks that get executed
     * the reason we stream back is because some lints are very fast, and some may
     * take more time (e.g., they need an extra verification step with an agent)
     *
     * @generated from rpc aiserver.v1.AiService.StreamAiLintBug
     */
    streamAiLintBug: {
      name: "StreamAiLintBug",
      I: StreamAiLintBugRequest,
      O: StreamAiLintBugResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.LogUserLintReply
     */
    logUserLintReply: {
      name: "LogUserLintReply",
      I: LogUserLintReplyRequest,
      O: LogUserLintReplyResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.LogLinterExplicitUserFeedback
     */
    logLinterExplicitUserFeedback: {
      name: "LogLinterExplicitUserFeedback",
      I: LogLinterExplicitUserFeedbackRequest,
      O: LogLinterExplicitUserFeedbackResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.StreamFixMarkers
     */
    streamFixMarkers: {
      name: "StreamFixMarkers",
      I: FixMarkersRequest,
      O: FixMarkersResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Telemtry!
     *
     * @generated from rpc aiserver.v1.AiService.ReportInlineAction
     */
    reportInlineAction: {
      name: "ReportInlineAction",
      I: ReportInlineActionRequest,
      O: ReportInlineActionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ----------------------------------
     * New idea: call prompts directly from a client on the server!!
     * ----------------------------------
     *
     * @generated from rpc aiserver.v1.AiService.StreamPriomptPrompt
     */
    streamPriomptPrompt: {
      name: "StreamPriomptPrompt",
      I: StreamPriomptPromptRequest,
      O: StreamPriomptPromptResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * ---- start of deprecated ----
     *
     * @generated from rpc aiserver.v1.AiService.StreamLint
     */
    streamLint: {
      name: "StreamLint",
      I: StreamLintRequest,
      O: StreamChatResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.StreamNewLintRule
     */
    streamNewLintRule: {
      name: "StreamNewLintRule",
      I: StreamNewRuleRequest,
      O: StreamChatResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.AiProject
     */
    aiProject: {
      name: "AiProject",
      I: AiProjectRequest,
      O: AiProjectResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.ToCamelCase
     */
    toCamelCase: {
      name: "ToCamelCase",
      I: ToCamelCaseRequest,
      O: ToCamelCaseResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

