// @generated by protoc-gen-connect-web v0.6.0 with parameter "target=ts"
// @generated from file aiserver/v1/ai_project.proto (package aiserver.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AiProjectAgentInitRequest, AiProjectAgentPlanRequest, AiProjectAgentPlanResponse, AiProjectBreakdownFeedbackRequest, AiProjectBreakdownFeedbackResponse, AiProjectBreakdownRequest, AiProjectBreakdownResponse, AiProjectClarificationRequest, AiProjectClarificationResponse, AiProjectPlanFeedbackRequest, AiProjectPlanFeedbackResponse, AiProjectStepFeedbackRequest, AiProjectStepFeedbackResponseWrapped, AiProjectStepRequest, AiProjectStepResponseWrapped } from './ai_project_pb';
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service aiserver.v1.AiProjectService
 */
export const AiProjectService = {
  typeName: "aiserver.v1.AiProjectService",
  methods: {
    /**
     * New AI project
     * Intialize with a prompt
     *
     * @generated from rpc aiserver.v1.AiProjectService.AiProjectAgentInit
     */
    aiProjectAgentInit: {
      name: "AiProjectAgentInit",
      I: AiProjectAgentInitRequest,
      O: AiProjectClarificationResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Clarify the structure and path to build up the project
     *
     * @generated from rpc aiserver.v1.AiProjectService.AiProjectClarification
     */
    aiProjectClarification: {
      name: "AiProjectClarification",
      I: AiProjectClarificationRequest,
      O: AiProjectClarificationResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Asks the agent to provide a plan of attack
     *
     * @generated from rpc aiserver.v1.AiProjectService.AiProjectPlan
     */
    aiProjectPlan: {
      name: "AiProjectPlan",
      I: AiProjectAgentPlanRequest,
      O: AiProjectAgentPlanResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * The user asks for any additional feedback on the plan
     *
     * @generated from rpc aiserver.v1.AiProjectService.AiProjectPlanFeedback
     */
    aiProjectPlanFeedback: {
      name: "AiProjectPlanFeedback",
      I: AiProjectPlanFeedbackRequest,
      O: AiProjectPlanFeedbackResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Breaks down the steps of the project
     *
     * @generated from rpc aiserver.v1.AiProjectService.AiProjectBreakdown
     */
    aiProjectBreakdown: {
      name: "AiProjectBreakdown",
      I: AiProjectBreakdownRequest,
      O: AiProjectBreakdownResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Clarifies the steps laid out in the breakdown
     *
     * @generated from rpc aiserver.v1.AiProjectService.AiProjectBreakdownFeedback
     */
    aiProjectBreakdownFeedback: {
      name: "AiProjectBreakdownFeedback",
      I: AiProjectBreakdownFeedbackRequest,
      O: AiProjectBreakdownFeedbackResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * actually executes one of the steps in the initial ai project creation
     *
     * @generated from rpc aiserver.v1.AiProjectService.AiProjectStep
     */
    aiProjectStep: {
      name: "AiProjectStep",
      I: AiProjectStepRequest,
      O: AiProjectStepResponseWrapped,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Lets the user provide feedback between steps
     *
     * @generated from rpc aiserver.v1.AiProjectService.AiProjectStepFeedback
     */
    aiProjectStepFeedback: {
      name: "AiProjectStepFeedback",
      I: AiProjectStepFeedbackRequest,
      O: AiProjectStepFeedbackResponseWrapped,
      kind: MethodKind.ServerStreaming,
    },
  }
} as const;

