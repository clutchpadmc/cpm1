// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file aiserver/v1/ai_project.proto (package aiserver.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ModelDetails, PureMessage } from './utils_pb';
import { ShellType } from './tools_pb';

/**
 * @generated from enum aiserver.v1.AiProjectStepType
 */
export enum AiProjectStepType {
  /**
   * @generated from enum value: AI_PROJECT_STEP_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: AI_PROJECT_STEP_TYPE_READ_WRITE_FILE = 1;
   */
  READ_WRITE_FILE = 1,

  /**
   * @generated from enum value: AI_PROJECT_STEP_TYPE_RUN_TERM = 2;
   */
  RUN_TERM = 2,

  /**
   * @generated from enum value: AI_PROJECT_STEP_TYPE_CREATE_RM_FILES = 3;
   */
  CREATE_RM_FILES = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(AiProjectStepType)
proto3.util.setEnumType(AiProjectStepType, "aiserver.v1.AiProjectStepType", [
  { no: 0, name: "AI_PROJECT_STEP_TYPE_UNSPECIFIED" },
  { no: 1, name: "AI_PROJECT_STEP_TYPE_READ_WRITE_FILE" },
  { no: 2, name: "AI_PROJECT_STEP_TYPE_RUN_TERM" },
  { no: 3, name: "AI_PROJECT_STEP_TYPE_CREATE_RM_FILES" },
]);

/**
 * Step 1 in the chain - initialize the actual project
 * given a description
 *
 * @generated from message aiserver.v1.AiProjectAgentInitRequest
 */
export class AiProjectAgentInitRequest extends Message<AiProjectAgentInitRequest> {
  /**
   * @generated from field: aiserver.v1.ModelDetails model_details = 1;
   */
  modelDetails?: ModelDetails;

  /**
   * @generated from field: string prompt = 2;
   */
  prompt = "";

  constructor(data?: PartialMessage<AiProjectAgentInitRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AiProjectAgentInitRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "model_details", kind: "message", T: ModelDetails },
    { no: 2, name: "prompt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AiProjectAgentInitRequest {
    return new AiProjectAgentInitRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AiProjectAgentInitRequest {
    return new AiProjectAgentInitRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AiProjectAgentInitRequest {
    return new AiProjectAgentInitRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AiProjectAgentInitRequest | PlainMessage<AiProjectAgentInitRequest> | undefined, b: AiProjectAgentInitRequest | PlainMessage<AiProjectAgentInitRequest> | undefined): boolean {
    return proto3.util.equals(AiProjectAgentInitRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.MessagePayload
 */
export class MessagePayload extends Message<MessagePayload> {
  /**
   * @generated from field: string full_user_message = 1;
   */
  fullUserMessage = "";

  /**
   * @generated from field: string full_bot_message = 2;
   */
  fullBotMessage = "";

  constructor(data?: PartialMessage<MessagePayload>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.MessagePayload";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "full_user_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "full_bot_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagePayload {
    return new MessagePayload().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagePayload {
    return new MessagePayload().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagePayload {
    return new MessagePayload().fromJsonString(jsonString, options);
  }

  static equals(a: MessagePayload | PlainMessage<MessagePayload> | undefined, b: MessagePayload | PlainMessage<MessagePayload> | undefined): boolean {
    return proto3.util.equals(MessagePayload, a, b);
  }
}

/**
 * The response will be a clarification always
 *
 * @generated from message aiserver.v1.AiProjectClarification
 */
export class AiProjectClarification extends Message<AiProjectClarification> {
  /**
   * @generated from oneof aiserver.v1.AiProjectClarification.response
   */
  response: {
    /**
     * @generated from field: string output = 1;
     */
    value: string;
    case: "output";
  } | {
    /**
     * @generated from field: string thought = 2;
     */
    value: string;
    case: "thought";
  } | {
    /**
     * @generated from field: aiserver.v1.MessagePayload message_payload = 3;
     */
    value: MessagePayload;
    case: "messagePayload";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AiProjectClarification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AiProjectClarification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "output", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "response" },
    { no: 2, name: "thought", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "response" },
    { no: 3, name: "message_payload", kind: "message", T: MessagePayload, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AiProjectClarification {
    return new AiProjectClarification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AiProjectClarification {
    return new AiProjectClarification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AiProjectClarification {
    return new AiProjectClarification().fromJsonString(jsonString, options);
  }

  static equals(a: AiProjectClarification | PlainMessage<AiProjectClarification> | undefined, b: AiProjectClarification | PlainMessage<AiProjectClarification> | undefined): boolean {
    return proto3.util.equals(AiProjectClarification, a, b);
  }
}

/**
 * Step 2 in the chain - clarify the details on
 * the project
 * The next step provides a plan of attack and a rough structure
 *
 * @generated from message aiserver.v1.AiProjectClarificationRequest
 */
export class AiProjectClarificationRequest extends Message<AiProjectClarificationRequest> {
  /**
   * @generated from field: aiserver.v1.ModelDetails model_details = 1;
   */
  modelDetails?: ModelDetails;

  /**
   * @generated from field: string clarification_response = 2;
   */
  clarificationResponse = "";

  /**
   * @generated from field: repeated aiserver.v1.PureMessage previous_messages = 3;
   */
  previousMessages: PureMessage[] = [];

  constructor(data?: PartialMessage<AiProjectClarificationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AiProjectClarificationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "model_details", kind: "message", T: ModelDetails },
    { no: 2, name: "clarification_response", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "previous_messages", kind: "message", T: PureMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AiProjectClarificationRequest {
    return new AiProjectClarificationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AiProjectClarificationRequest {
    return new AiProjectClarificationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AiProjectClarificationRequest {
    return new AiProjectClarificationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AiProjectClarificationRequest | PlainMessage<AiProjectClarificationRequest> | undefined, b: AiProjectClarificationRequest | PlainMessage<AiProjectClarificationRequest> | undefined): boolean {
    return proto3.util.equals(AiProjectClarificationRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.AiProjectClarificationResponse
 */
export class AiProjectClarificationResponse extends Message<AiProjectClarificationResponse> {
  /**
   * We either keep on clarifying, or we provide a plan
   *
   * @generated from oneof aiserver.v1.AiProjectClarificationResponse.response
   */
  response: {
    /**
     * @generated from field: aiserver.v1.AiProjectClarification clarification = 1;
     */
    value: AiProjectClarification;
    case: "clarification";
  } | {
    /**
     * @generated from field: bool repeat_clarification = 2;
     */
    value: boolean;
    case: "repeatClarification";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AiProjectClarificationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AiProjectClarificationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clarification", kind: "message", T: AiProjectClarification, oneof: "response" },
    { no: 2, name: "repeat_clarification", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AiProjectClarificationResponse {
    return new AiProjectClarificationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AiProjectClarificationResponse {
    return new AiProjectClarificationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AiProjectClarificationResponse {
    return new AiProjectClarificationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AiProjectClarificationResponse | PlainMessage<AiProjectClarificationResponse> | undefined, b: AiProjectClarificationResponse | PlainMessage<AiProjectClarificationResponse> | undefined): boolean {
    return proto3.util.equals(AiProjectClarificationResponse, a, b);
  }
}

/**
 * Step 3 in the chain - Create a plan/spec
 *
 * @generated from message aiserver.v1.AiProjectAgentPlanRequest
 */
export class AiProjectAgentPlanRequest extends Message<AiProjectAgentPlanRequest> {
  /**
   * @generated from field: aiserver.v1.ModelDetails model_details = 1;
   */
  modelDetails?: ModelDetails;

  /**
   * @generated from field: repeated aiserver.v1.PureMessage previous_messages = 3;
   */
  previousMessages: PureMessage[] = [];

  constructor(data?: PartialMessage<AiProjectAgentPlanRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AiProjectAgentPlanRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "model_details", kind: "message", T: ModelDetails },
    { no: 3, name: "previous_messages", kind: "message", T: PureMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AiProjectAgentPlanRequest {
    return new AiProjectAgentPlanRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AiProjectAgentPlanRequest {
    return new AiProjectAgentPlanRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AiProjectAgentPlanRequest {
    return new AiProjectAgentPlanRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AiProjectAgentPlanRequest | PlainMessage<AiProjectAgentPlanRequest> | undefined, b: AiProjectAgentPlanRequest | PlainMessage<AiProjectAgentPlanRequest> | undefined): boolean {
    return proto3.util.equals(AiProjectAgentPlanRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.AiProjectAgentPlanResponse
 */
export class AiProjectAgentPlanResponse extends Message<AiProjectAgentPlanResponse> {
  /**
   * @generated from oneof aiserver.v1.AiProjectAgentPlanResponse.response
   */
  response: {
    /**
     * @generated from field: string thought = 1;
     */
    value: string;
    case: "thought";
  } | {
    /**
     * @generated from field: string output = 2;
     */
    value: string;
    case: "output";
  } | {
    /**
     * @generated from field: aiserver.v1.MessagePayload message_payload = 3;
     */
    value: MessagePayload;
    case: "messagePayload";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AiProjectAgentPlanResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AiProjectAgentPlanResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "thought", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "response" },
    { no: 2, name: "output", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "response" },
    { no: 3, name: "message_payload", kind: "message", T: MessagePayload, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AiProjectAgentPlanResponse {
    return new AiProjectAgentPlanResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AiProjectAgentPlanResponse {
    return new AiProjectAgentPlanResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AiProjectAgentPlanResponse {
    return new AiProjectAgentPlanResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AiProjectAgentPlanResponse | PlainMessage<AiProjectAgentPlanResponse> | undefined, b: AiProjectAgentPlanResponse | PlainMessage<AiProjectAgentPlanResponse> | undefined): boolean {
    return proto3.util.equals(AiProjectAgentPlanResponse, a, b);
  }
}

/**
 * Step 3.5 - get feedback on the plan
 *
 * @generated from message aiserver.v1.AiProjectPlanFeedbackRequest
 */
export class AiProjectPlanFeedbackRequest extends Message<AiProjectPlanFeedbackRequest> {
  /**
   * @generated from field: aiserver.v1.ModelDetails model_details = 1;
   */
  modelDetails?: ModelDetails;

  /**
   * @generated from field: repeated aiserver.v1.PureMessage previous_messages = 2;
   */
  previousMessages: PureMessage[] = [];

  /**
   * @generated from field: string feedback_or_progress = 3;
   */
  feedbackOrProgress = "";

  /**
   * @generated from field: bool force_move_to_next_step = 4;
   */
  forceMoveToNextStep = false;

  constructor(data?: PartialMessage<AiProjectPlanFeedbackRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AiProjectPlanFeedbackRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "model_details", kind: "message", T: ModelDetails },
    { no: 2, name: "previous_messages", kind: "message", T: PureMessage, repeated: true },
    { no: 3, name: "feedback_or_progress", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "force_move_to_next_step", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AiProjectPlanFeedbackRequest {
    return new AiProjectPlanFeedbackRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AiProjectPlanFeedbackRequest {
    return new AiProjectPlanFeedbackRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AiProjectPlanFeedbackRequest {
    return new AiProjectPlanFeedbackRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AiProjectPlanFeedbackRequest | PlainMessage<AiProjectPlanFeedbackRequest> | undefined, b: AiProjectPlanFeedbackRequest | PlainMessage<AiProjectPlanFeedbackRequest> | undefined): boolean {
    return proto3.util.equals(AiProjectPlanFeedbackRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.AiProjectPlanFeedbackResponse
 */
export class AiProjectPlanFeedbackResponse extends Message<AiProjectPlanFeedbackResponse> {
  /**
   * @generated from oneof aiserver.v1.AiProjectPlanFeedbackResponse.response
   */
  response: {
    /**
     * @generated from field: aiserver.v1.AiProjectAgentPlanResponse revised_plan = 1;
     */
    value: AiProjectAgentPlanResponse;
    case: "revisedPlan";
  } | {
    /**
     * @generated from field: bool repeat_feedback = 2;
     */
    value: boolean;
    case: "repeatFeedback";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AiProjectPlanFeedbackResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AiProjectPlanFeedbackResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "revised_plan", kind: "message", T: AiProjectAgentPlanResponse, oneof: "response" },
    { no: 2, name: "repeat_feedback", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AiProjectPlanFeedbackResponse {
    return new AiProjectPlanFeedbackResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AiProjectPlanFeedbackResponse {
    return new AiProjectPlanFeedbackResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AiProjectPlanFeedbackResponse {
    return new AiProjectPlanFeedbackResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AiProjectPlanFeedbackResponse | PlainMessage<AiProjectPlanFeedbackResponse> | undefined, b: AiProjectPlanFeedbackResponse | PlainMessage<AiProjectPlanFeedbackResponse> | undefined): boolean {
    return proto3.util.equals(AiProjectPlanFeedbackResponse, a, b);
  }
}

/**
 * Step 4 in the chain - create the breakdown of basic steps
 *
 * @generated from message aiserver.v1.AiProjectBreakdownRequest
 */
export class AiProjectBreakdownRequest extends Message<AiProjectBreakdownRequest> {
  /**
   * @generated from field: aiserver.v1.ModelDetails model_details = 1;
   */
  modelDetails?: ModelDetails;

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: string spec = 3;
   */
  spec = "";

  constructor(data?: PartialMessage<AiProjectBreakdownRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AiProjectBreakdownRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "model_details", kind: "message", T: ModelDetails },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "spec", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AiProjectBreakdownRequest {
    return new AiProjectBreakdownRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AiProjectBreakdownRequest {
    return new AiProjectBreakdownRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AiProjectBreakdownRequest {
    return new AiProjectBreakdownRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AiProjectBreakdownRequest | PlainMessage<AiProjectBreakdownRequest> | undefined, b: AiProjectBreakdownRequest | PlainMessage<AiProjectBreakdownRequest> | undefined): boolean {
    return proto3.util.equals(AiProjectBreakdownRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.AiProjectBreakdownResponse
 */
export class AiProjectBreakdownResponse extends Message<AiProjectBreakdownResponse> {
  /**
   * @generated from oneof aiserver.v1.AiProjectBreakdownResponse.response
   */
  response: {
    /**
     * @generated from field: string thought = 1;
     */
    value: string;
    case: "thought";
  } | {
    /**
     * @generated from field: aiserver.v1.AiProjectBreakdownResponse.Step step = 2;
     */
    value: AiProjectBreakdownResponse_Step;
    case: "step";
  } | {
    /**
     * @generated from field: aiserver.v1.MessagePayload message_payload = 3;
     */
    value: MessagePayload;
    case: "messagePayload";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AiProjectBreakdownResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AiProjectBreakdownResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "thought", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "response" },
    { no: 2, name: "step", kind: "message", T: AiProjectBreakdownResponse_Step, oneof: "response" },
    { no: 3, name: "message_payload", kind: "message", T: MessagePayload, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AiProjectBreakdownResponse {
    return new AiProjectBreakdownResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AiProjectBreakdownResponse {
    return new AiProjectBreakdownResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AiProjectBreakdownResponse {
    return new AiProjectBreakdownResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AiProjectBreakdownResponse | PlainMessage<AiProjectBreakdownResponse> | undefined, b: AiProjectBreakdownResponse | PlainMessage<AiProjectBreakdownResponse> | undefined): boolean {
    return proto3.util.equals(AiProjectBreakdownResponse, a, b);
  }
}

/**
 * @generated from message aiserver.v1.AiProjectBreakdownResponse.Step
 */
export class AiProjectBreakdownResponse_Step extends Message<AiProjectBreakdownResponse_Step> {
  /**
   * @generated from field: int32 step_number = 1;
   */
  stepNumber = 0;

  /**
   * @generated from field: string step_description = 2;
   */
  stepDescription = "";

  /**
   * @generated from field: aiserver.v1.AiProjectStepType step_type = 3;
   */
  stepType = AiProjectStepType.UNSPECIFIED;

  constructor(data?: PartialMessage<AiProjectBreakdownResponse_Step>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AiProjectBreakdownResponse.Step";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "step_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "step_description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "step_type", kind: "enum", T: proto3.getEnumType(AiProjectStepType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AiProjectBreakdownResponse_Step {
    return new AiProjectBreakdownResponse_Step().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AiProjectBreakdownResponse_Step {
    return new AiProjectBreakdownResponse_Step().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AiProjectBreakdownResponse_Step {
    return new AiProjectBreakdownResponse_Step().fromJsonString(jsonString, options);
  }

  static equals(a: AiProjectBreakdownResponse_Step | PlainMessage<AiProjectBreakdownResponse_Step> | undefined, b: AiProjectBreakdownResponse_Step | PlainMessage<AiProjectBreakdownResponse_Step> | undefined): boolean {
    return proto3.util.equals(AiProjectBreakdownResponse_Step, a, b);
  }
}

/**
 * Step 4.5 in the chain, we get feedback on the breakdown and revise
 *
 * @generated from message aiserver.v1.AiProjectBreakdownFeedbackRequest
 */
export class AiProjectBreakdownFeedbackRequest extends Message<AiProjectBreakdownFeedbackRequest> {
  /**
   * @generated from field: aiserver.v1.ModelDetails model_details = 1;
   */
  modelDetails?: ModelDetails;

  /**
   * @generated from field: repeated aiserver.v1.PureMessage previous_messages = 2;
   */
  previousMessages: PureMessage[] = [];

  /**
   * @generated from field: string feedback_or_progress = 3;
   */
  feedbackOrProgress = "";

  /**
   * @generated from field: bool force_move_to_next_step = 4;
   */
  forceMoveToNextStep = false;

  constructor(data?: PartialMessage<AiProjectBreakdownFeedbackRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AiProjectBreakdownFeedbackRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "model_details", kind: "message", T: ModelDetails },
    { no: 2, name: "previous_messages", kind: "message", T: PureMessage, repeated: true },
    { no: 3, name: "feedback_or_progress", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "force_move_to_next_step", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AiProjectBreakdownFeedbackRequest {
    return new AiProjectBreakdownFeedbackRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AiProjectBreakdownFeedbackRequest {
    return new AiProjectBreakdownFeedbackRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AiProjectBreakdownFeedbackRequest {
    return new AiProjectBreakdownFeedbackRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AiProjectBreakdownFeedbackRequest | PlainMessage<AiProjectBreakdownFeedbackRequest> | undefined, b: AiProjectBreakdownFeedbackRequest | PlainMessage<AiProjectBreakdownFeedbackRequest> | undefined): boolean {
    return proto3.util.equals(AiProjectBreakdownFeedbackRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.AiProjectBreakdownFeedbackResponse
 */
export class AiProjectBreakdownFeedbackResponse extends Message<AiProjectBreakdownFeedbackResponse> {
  /**
   * @generated from oneof aiserver.v1.AiProjectBreakdownFeedbackResponse.response
   */
  response: {
    /**
     * @generated from field: aiserver.v1.AiProjectBreakdownResponse revised_breakdown = 1;
     */
    value: AiProjectBreakdownResponse;
    case: "revisedBreakdown";
  } | {
    /**
     * @generated from field: bool repeat_feedback = 2;
     */
    value: boolean;
    case: "repeatFeedback";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AiProjectBreakdownFeedbackResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AiProjectBreakdownFeedbackResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "revised_breakdown", kind: "message", T: AiProjectBreakdownResponse, oneof: "response" },
    { no: 2, name: "repeat_feedback", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AiProjectBreakdownFeedbackResponse {
    return new AiProjectBreakdownFeedbackResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AiProjectBreakdownFeedbackResponse {
    return new AiProjectBreakdownFeedbackResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AiProjectBreakdownFeedbackResponse {
    return new AiProjectBreakdownFeedbackResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AiProjectBreakdownFeedbackResponse | PlainMessage<AiProjectBreakdownFeedbackResponse> | undefined, b: AiProjectBreakdownFeedbackResponse | PlainMessage<AiProjectBreakdownFeedbackResponse> | undefined): boolean {
    return proto3.util.equals(AiProjectBreakdownFeedbackResponse, a, b);
  }
}

/**
 * Steps 5-n in the chain - one of the basic steps that the model has access to
 *
 * @generated from message aiserver.v1.AiProjectStepRequest
 */
export class AiProjectStepRequest extends Message<AiProjectStepRequest> {
  /**
   * @generated from field: aiserver.v1.ModelDetails model_details = 1;
   */
  modelDetails?: ModelDetails;

  /**
   * @generated from field: string step_description = 2;
   */
  stepDescription = "";

  /**
   * @generated from field: string project_plan = 3;
   */
  projectPlan = "";

  /**
   * @generated from field: repeated string project_breakdown = 4;
   */
  projectBreakdown: string[] = [];

  /**
   * @generated from field: aiserver.v1.AiProjectStepType step_type = 5;
   */
  stepType = AiProjectStepType.UNSPECIFIED;

  /**
   * optional shell type
   *
   * @generated from field: aiserver.v1.ShellType shell_type = 6;
   */
  shellType = ShellType.UNSPECIFIED;

  constructor(data?: PartialMessage<AiProjectStepRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AiProjectStepRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "model_details", kind: "message", T: ModelDetails },
    { no: 2, name: "step_description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project_plan", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "project_breakdown", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "step_type", kind: "enum", T: proto3.getEnumType(AiProjectStepType) },
    { no: 6, name: "shell_type", kind: "enum", T: proto3.getEnumType(ShellType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AiProjectStepRequest {
    return new AiProjectStepRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AiProjectStepRequest {
    return new AiProjectStepRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AiProjectStepRequest {
    return new AiProjectStepRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AiProjectStepRequest | PlainMessage<AiProjectStepRequest> | undefined, b: AiProjectStepRequest | PlainMessage<AiProjectStepRequest> | undefined): boolean {
    return proto3.util.equals(AiProjectStepRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.AiProjectStepResponse
 */
export class AiProjectStepResponse extends Message<AiProjectStepResponse> {
  /**
   * We provide reasoning, or provide a thought
   * When we end, we provide the message payload
   *
   * @generated from oneof aiserver.v1.AiProjectStepResponse.response
   */
  response: {
    /**
     * @generated from field: string thought = 1;
     */
    value: string;
    case: "thought";
  } | {
    /**
     * @generated from field: string output = 2;
     */
    value: string;
    case: "output";
  } | {
    /**
     * @generated from field: aiserver.v1.MessagePayload message_payload = 3;
     */
    value: MessagePayload;
    case: "messagePayload";
  } | {
    /**
     * @generated from field: aiserver.v1.AiProjectStepResponse.StepPayload step_payload = 5;
     */
    value: AiProjectStepResponse_StepPayload;
    case: "stepPayload";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * The type of the step
   *
   * @generated from field: aiserver.v1.AiProjectStepType step_type = 4;
   */
  stepType = AiProjectStepType.UNSPECIFIED;

  constructor(data?: PartialMessage<AiProjectStepResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AiProjectStepResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "thought", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "response" },
    { no: 2, name: "output", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "response" },
    { no: 3, name: "message_payload", kind: "message", T: MessagePayload, oneof: "response" },
    { no: 5, name: "step_payload", kind: "message", T: AiProjectStepResponse_StepPayload, oneof: "response" },
    { no: 4, name: "step_type", kind: "enum", T: proto3.getEnumType(AiProjectStepType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AiProjectStepResponse {
    return new AiProjectStepResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AiProjectStepResponse {
    return new AiProjectStepResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AiProjectStepResponse {
    return new AiProjectStepResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AiProjectStepResponse | PlainMessage<AiProjectStepResponse> | undefined, b: AiProjectStepResponse | PlainMessage<AiProjectStepResponse> | undefined): boolean {
    return proto3.util.equals(AiProjectStepResponse, a, b);
  }
}

/**
 * @generated from message aiserver.v1.AiProjectStepResponse.WriteCode
 */
export class AiProjectStepResponse_WriteCode extends Message<AiProjectStepResponse_WriteCode> {
  /**
   * @generated from field: string filename = 1;
   */
  filename = "";

  constructor(data?: PartialMessage<AiProjectStepResponse_WriteCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AiProjectStepResponse.WriteCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filename", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AiProjectStepResponse_WriteCode {
    return new AiProjectStepResponse_WriteCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AiProjectStepResponse_WriteCode {
    return new AiProjectStepResponse_WriteCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AiProjectStepResponse_WriteCode {
    return new AiProjectStepResponse_WriteCode().fromJsonString(jsonString, options);
  }

  static equals(a: AiProjectStepResponse_WriteCode | PlainMessage<AiProjectStepResponse_WriteCode> | undefined, b: AiProjectStepResponse_WriteCode | PlainMessage<AiProjectStepResponse_WriteCode> | undefined): boolean {
    return proto3.util.equals(AiProjectStepResponse_WriteCode, a, b);
  }
}

/**
 * @generated from message aiserver.v1.AiProjectStepResponse.ReviseCode
 */
export class AiProjectStepResponse_ReviseCode extends Message<AiProjectStepResponse_ReviseCode> {
  /**
   * @generated from field: string thought = 1;
   */
  thought = "";

  constructor(data?: PartialMessage<AiProjectStepResponse_ReviseCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AiProjectStepResponse.ReviseCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "thought", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AiProjectStepResponse_ReviseCode {
    return new AiProjectStepResponse_ReviseCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AiProjectStepResponse_ReviseCode {
    return new AiProjectStepResponse_ReviseCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AiProjectStepResponse_ReviseCode {
    return new AiProjectStepResponse_ReviseCode().fromJsonString(jsonString, options);
  }

  static equals(a: AiProjectStepResponse_ReviseCode | PlainMessage<AiProjectStepResponse_ReviseCode> | undefined, b: AiProjectStepResponse_ReviseCode | PlainMessage<AiProjectStepResponse_ReviseCode> | undefined): boolean {
    return proto3.util.equals(AiProjectStepResponse_ReviseCode, a, b);
  }
}

/**
 * @generated from message aiserver.v1.AiProjectStepResponse.RunTerm
 */
export class AiProjectStepResponse_RunTerm extends Message<AiProjectStepResponse_RunTerm> {
  /**
   * We stream the terminal run, each command/response at a time
   *
   * @generated from field: string command_batch_uuid = 1;
   */
  commandBatchUuid = "";

  /**
   * @generated from field: string command = 2;
   */
  command = "";

  /**
   * @generated from field: string response = 3;
   */
  response = "";

  /**
   * @generated from field: string text = 4;
   */
  text = "";

  constructor(data?: PartialMessage<AiProjectStepResponse_RunTerm>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AiProjectStepResponse.RunTerm";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "command_batch_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "command", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AiProjectStepResponse_RunTerm {
    return new AiProjectStepResponse_RunTerm().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AiProjectStepResponse_RunTerm {
    return new AiProjectStepResponse_RunTerm().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AiProjectStepResponse_RunTerm {
    return new AiProjectStepResponse_RunTerm().fromJsonString(jsonString, options);
  }

  static equals(a: AiProjectStepResponse_RunTerm | PlainMessage<AiProjectStepResponse_RunTerm> | undefined, b: AiProjectStepResponse_RunTerm | PlainMessage<AiProjectStepResponse_RunTerm> | undefined): boolean {
    return proto3.util.equals(AiProjectStepResponse_RunTerm, a, b);
  }
}

/**
 * @generated from message aiserver.v1.AiProjectStepResponse.CreatingFiles
 */
export class AiProjectStepResponse_CreatingFiles extends Message<AiProjectStepResponse_CreatingFiles> {
  /**
   * @generated from oneof aiserver.v1.AiProjectStepResponse.CreatingFiles.payload
   */
  payload: {
    /**
     * @generated from field: string filename = 1;
     */
    value: string;
    case: "filename";
  } | {
    /**
     * @generated from field: string directory = 2;
     */
    value: string;
    case: "directory";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AiProjectStepResponse_CreatingFiles>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AiProjectStepResponse.CreatingFiles";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filename", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "payload" },
    { no: 2, name: "directory", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "payload" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AiProjectStepResponse_CreatingFiles {
    return new AiProjectStepResponse_CreatingFiles().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AiProjectStepResponse_CreatingFiles {
    return new AiProjectStepResponse_CreatingFiles().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AiProjectStepResponse_CreatingFiles {
    return new AiProjectStepResponse_CreatingFiles().fromJsonString(jsonString, options);
  }

  static equals(a: AiProjectStepResponse_CreatingFiles | PlainMessage<AiProjectStepResponse_CreatingFiles> | undefined, b: AiProjectStepResponse_CreatingFiles | PlainMessage<AiProjectStepResponse_CreatingFiles> | undefined): boolean {
    return proto3.util.equals(AiProjectStepResponse_CreatingFiles, a, b);
  }
}

/**
 * @generated from message aiserver.v1.AiProjectStepResponse.Nothing
 */
export class AiProjectStepResponse_Nothing extends Message<AiProjectStepResponse_Nothing> {
  constructor(data?: PartialMessage<AiProjectStepResponse_Nothing>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AiProjectStepResponse.Nothing";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AiProjectStepResponse_Nothing {
    return new AiProjectStepResponse_Nothing().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AiProjectStepResponse_Nothing {
    return new AiProjectStepResponse_Nothing().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AiProjectStepResponse_Nothing {
    return new AiProjectStepResponse_Nothing().fromJsonString(jsonString, options);
  }

  static equals(a: AiProjectStepResponse_Nothing | PlainMessage<AiProjectStepResponse_Nothing> | undefined, b: AiProjectStepResponse_Nothing | PlainMessage<AiProjectStepResponse_Nothing> | undefined): boolean {
    return proto3.util.equals(AiProjectStepResponse_Nothing, a, b);
  }
}

/**
 * @generated from message aiserver.v1.AiProjectStepResponse.StepPayload
 */
export class AiProjectStepResponse_StepPayload extends Message<AiProjectStepResponse_StepPayload> {
  /**
   * @generated from oneof aiserver.v1.AiProjectStepResponse.StepPayload.payload
   */
  payload: {
    /**
     * @generated from field: aiserver.v1.AiProjectStepResponse.WriteCode write_code = 5;
     */
    value: AiProjectStepResponse_WriteCode;
    case: "writeCode";
  } | {
    /**
     * @generated from field: aiserver.v1.AiProjectStepResponse.RunTerm run_term = 6;
     */
    value: AiProjectStepResponse_RunTerm;
    case: "runTerm";
  } | {
    /**
     * @generated from field: aiserver.v1.AiProjectStepResponse.CreatingFiles creating_files = 7;
     */
    value: AiProjectStepResponse_CreatingFiles;
    case: "creatingFiles";
  } | {
    /**
     * @generated from field: aiserver.v1.AiProjectStepResponse.ReviseCode revise_code = 8;
     */
    value: AiProjectStepResponse_ReviseCode;
    case: "reviseCode";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AiProjectStepResponse_StepPayload>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AiProjectStepResponse.StepPayload";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 5, name: "write_code", kind: "message", T: AiProjectStepResponse_WriteCode, oneof: "payload" },
    { no: 6, name: "run_term", kind: "message", T: AiProjectStepResponse_RunTerm, oneof: "payload" },
    { no: 7, name: "creating_files", kind: "message", T: AiProjectStepResponse_CreatingFiles, oneof: "payload" },
    { no: 8, name: "revise_code", kind: "message", T: AiProjectStepResponse_ReviseCode, oneof: "payload" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AiProjectStepResponse_StepPayload {
    return new AiProjectStepResponse_StepPayload().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AiProjectStepResponse_StepPayload {
    return new AiProjectStepResponse_StepPayload().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AiProjectStepResponse_StepPayload {
    return new AiProjectStepResponse_StepPayload().fromJsonString(jsonString, options);
  }

  static equals(a: AiProjectStepResponse_StepPayload | PlainMessage<AiProjectStepResponse_StepPayload> | undefined, b: AiProjectStepResponse_StepPayload | PlainMessage<AiProjectStepResponse_StepPayload> | undefined): boolean {
    return proto3.util.equals(AiProjectStepResponse_StepPayload, a, b);
  }
}

/**
 * @generated from message aiserver.v1.AiProjectStepResponseWrapped
 */
export class AiProjectStepResponseWrapped extends Message<AiProjectStepResponseWrapped> {
  /**
   * @generated from oneof aiserver.v1.AiProjectStepResponseWrapped.response
   */
  response: {
    /**
     * @generated from field: aiserver.v1.AiProjectStepResponse real_response = 1;
     */
    value: AiProjectStepResponse;
    case: "realResponse";
  } | {
    /**
     * @generated from field: string background_task_uuid = 2;
     */
    value: string;
    case: "backgroundTaskUuid";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AiProjectStepResponseWrapped>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AiProjectStepResponseWrapped";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "real_response", kind: "message", T: AiProjectStepResponse, oneof: "response" },
    { no: 2, name: "background_task_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AiProjectStepResponseWrapped {
    return new AiProjectStepResponseWrapped().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AiProjectStepResponseWrapped {
    return new AiProjectStepResponseWrapped().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AiProjectStepResponseWrapped {
    return new AiProjectStepResponseWrapped().fromJsonString(jsonString, options);
  }

  static equals(a: AiProjectStepResponseWrapped | PlainMessage<AiProjectStepResponseWrapped> | undefined, b: AiProjectStepResponseWrapped | PlainMessage<AiProjectStepResponseWrapped> | undefined): boolean {
    return proto3.util.equals(AiProjectStepResponseWrapped, a, b);
  }
}

/**
 * @generated from message aiserver.v1.AiProjectStepFeedbackRequest
 */
export class AiProjectStepFeedbackRequest extends Message<AiProjectStepFeedbackRequest> {
  /**
   * @generated from field: aiserver.v1.ModelDetails model_details = 1;
   */
  modelDetails?: ModelDetails;

  /**
   * @generated from field: string step_description = 2;
   */
  stepDescription = "";

  /**
   * @generated from field: string project_plan = 3;
   */
  projectPlan = "";

  /**
   * @generated from field: repeated string project_breakdown = 4;
   */
  projectBreakdown: string[] = [];

  /**
   * @generated from field: aiserver.v1.AiProjectStepType step_type = 5;
   */
  stepType = AiProjectStepType.UNSPECIFIED;

  /**
   * optional shell type
   *
   * @generated from field: aiserver.v1.ShellType shell_type = 6;
   */
  shellType = ShellType.UNSPECIFIED;

  /**
   * When the user provides feedback on the use of the tool,
   * this is how it happens
   * This is only passed in when asking the model to rerun a tool
   *
   * @generated from field: repeated aiserver.v1.PureMessage previous_feedback_messages = 7;
   */
  previousFeedbackMessages: PureMessage[] = [];

  /**
   * @generated from field: bool force_move_to_next_step = 8;
   */
  forceMoveToNextStep = false;

  /**
   * @generated from oneof aiserver.v1.AiProjectStepFeedbackRequest.feedback_payload
   */
  feedbackPayload: {
    /**
     * @generated from field: aiserver.v1.AiProjectStepFeedbackRequest.ModifyCodePayload modify_code_payload = 9;
     */
    value: AiProjectStepFeedbackRequest_ModifyCodePayload;
    case: "modifyCodePayload";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AiProjectStepFeedbackRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AiProjectStepFeedbackRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "model_details", kind: "message", T: ModelDetails },
    { no: 2, name: "step_description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project_plan", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "project_breakdown", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "step_type", kind: "enum", T: proto3.getEnumType(AiProjectStepType) },
    { no: 6, name: "shell_type", kind: "enum", T: proto3.getEnumType(ShellType) },
    { no: 7, name: "previous_feedback_messages", kind: "message", T: PureMessage, repeated: true },
    { no: 8, name: "force_move_to_next_step", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "modify_code_payload", kind: "message", T: AiProjectStepFeedbackRequest_ModifyCodePayload, oneof: "feedback_payload" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AiProjectStepFeedbackRequest {
    return new AiProjectStepFeedbackRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AiProjectStepFeedbackRequest {
    return new AiProjectStepFeedbackRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AiProjectStepFeedbackRequest {
    return new AiProjectStepFeedbackRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AiProjectStepFeedbackRequest | PlainMessage<AiProjectStepFeedbackRequest> | undefined, b: AiProjectStepFeedbackRequest | PlainMessage<AiProjectStepFeedbackRequest> | undefined): boolean {
    return proto3.util.equals(AiProjectStepFeedbackRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.AiProjectStepFeedbackRequest.ModifyCodePayload
 */
export class AiProjectStepFeedbackRequest_ModifyCodePayload extends Message<AiProjectStepFeedbackRequest_ModifyCodePayload> {
  /**
   * @generated from field: repeated string files_to_modify = 1;
   */
  filesToModify: string[] = [];

  /**
   * @generated from field: string feedback_text = 2;
   */
  feedbackText = "";

  constructor(data?: PartialMessage<AiProjectStepFeedbackRequest_ModifyCodePayload>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AiProjectStepFeedbackRequest.ModifyCodePayload";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "files_to_modify", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "feedback_text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AiProjectStepFeedbackRequest_ModifyCodePayload {
    return new AiProjectStepFeedbackRequest_ModifyCodePayload().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AiProjectStepFeedbackRequest_ModifyCodePayload {
    return new AiProjectStepFeedbackRequest_ModifyCodePayload().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AiProjectStepFeedbackRequest_ModifyCodePayload {
    return new AiProjectStepFeedbackRequest_ModifyCodePayload().fromJsonString(jsonString, options);
  }

  static equals(a: AiProjectStepFeedbackRequest_ModifyCodePayload | PlainMessage<AiProjectStepFeedbackRequest_ModifyCodePayload> | undefined, b: AiProjectStepFeedbackRequest_ModifyCodePayload | PlainMessage<AiProjectStepFeedbackRequest_ModifyCodePayload> | undefined): boolean {
    return proto3.util.equals(AiProjectStepFeedbackRequest_ModifyCodePayload, a, b);
  }
}

/**
 * @generated from message aiserver.v1.AiProjectStepFeedbackResponse
 */
export class AiProjectStepFeedbackResponse extends Message<AiProjectStepFeedbackResponse> {
  /**
   * @generated from oneof aiserver.v1.AiProjectStepFeedbackResponse.response
   */
  response: {
    /**
     * @generated from field: aiserver.v1.AiProjectStepResponse response_from_feedback = 1;
     */
    value: AiProjectStepResponse;
    case: "responseFromFeedback";
  } | {
    /**
     * @generated from field: bool repeat_feedback = 2;
     */
    value: boolean;
    case: "repeatFeedback";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AiProjectStepFeedbackResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AiProjectStepFeedbackResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response_from_feedback", kind: "message", T: AiProjectStepResponse, oneof: "response" },
    { no: 2, name: "repeat_feedback", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AiProjectStepFeedbackResponse {
    return new AiProjectStepFeedbackResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AiProjectStepFeedbackResponse {
    return new AiProjectStepFeedbackResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AiProjectStepFeedbackResponse {
    return new AiProjectStepFeedbackResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AiProjectStepFeedbackResponse | PlainMessage<AiProjectStepFeedbackResponse> | undefined, b: AiProjectStepFeedbackResponse | PlainMessage<AiProjectStepFeedbackResponse> | undefined): boolean {
    return proto3.util.equals(AiProjectStepFeedbackResponse, a, b);
  }
}

/**
 * @generated from message aiserver.v1.AiProjectStepFeedbackResponseWrapped
 */
export class AiProjectStepFeedbackResponseWrapped extends Message<AiProjectStepFeedbackResponseWrapped> {
  /**
   * @generated from oneof aiserver.v1.AiProjectStepFeedbackResponseWrapped.response
   */
  response: {
    /**
     * @generated from field: aiserver.v1.AiProjectStepFeedbackResponse real_response = 1;
     */
    value: AiProjectStepFeedbackResponse;
    case: "realResponse";
  } | {
    /**
     * @generated from field: string background_task_uuid = 2;
     */
    value: string;
    case: "backgroundTaskUuid";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AiProjectStepFeedbackResponseWrapped>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AiProjectStepFeedbackResponseWrapped";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "real_response", kind: "message", T: AiProjectStepFeedbackResponse, oneof: "response" },
    { no: 2, name: "background_task_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AiProjectStepFeedbackResponseWrapped {
    return new AiProjectStepFeedbackResponseWrapped().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AiProjectStepFeedbackResponseWrapped {
    return new AiProjectStepFeedbackResponseWrapped().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AiProjectStepFeedbackResponseWrapped {
    return new AiProjectStepFeedbackResponseWrapped().fromJsonString(jsonString, options);
  }

  static equals(a: AiProjectStepFeedbackResponseWrapped | PlainMessage<AiProjectStepFeedbackResponseWrapped> | undefined, b: AiProjectStepFeedbackResponseWrapped | PlainMessage<AiProjectStepFeedbackResponseWrapped> | undefined): boolean {
    return proto3.util.equals(AiProjectStepFeedbackResponseWrapped, a, b);
  }
}

/**
 * @generated from message aiserver.v1.AiProjectAgentWriteCode
 */
export class AiProjectAgentWriteCode extends Message<AiProjectAgentWriteCode> {
  /**
   * the code to write
   *
   * @generated from field: string code = 2;
   */
  code = "";

  /**
   * The path to write the code to
   *
   * @generated from field: string path = 3;
   */
  path = "";

  /**
   * The message payload if it exists
   *
   * @generated from field: aiserver.v1.MessagePayload message_payload = 4;
   */
  messagePayload?: MessagePayload;

  constructor(data?: PartialMessage<AiProjectAgentWriteCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AiProjectAgentWriteCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "message_payload", kind: "message", T: MessagePayload },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AiProjectAgentWriteCode {
    return new AiProjectAgentWriteCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AiProjectAgentWriteCode {
    return new AiProjectAgentWriteCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AiProjectAgentWriteCode {
    return new AiProjectAgentWriteCode().fromJsonString(jsonString, options);
  }

  static equals(a: AiProjectAgentWriteCode | PlainMessage<AiProjectAgentWriteCode> | undefined, b: AiProjectAgentWriteCode | PlainMessage<AiProjectAgentWriteCode> | undefined): boolean {
    return proto3.util.equals(AiProjectAgentWriteCode, a, b);
  }
}

